{
  "module": "raft",
  "declarations": [
    {
      "constant": "Nil"
    },
    {
      "constant": "CatchupResponse"
    },
    {
      "constant": "ConfigEntry"
    },
    {
      "constant": "AppendEntriesResponse"
    },
    {
      "constant": "CheckOldConfig"
    },
    {
      "constant": "RequestVoteResponse"
    },
    {
      "constant": "Candidate"
    },
    {
      "constant": "AppendEntriesRequest"
    },
    {
      "constant": "Server"
    },
    {
      "constant": "ValueEntry"
    },
    {
      "constant": "Leader"
    },
    {
      "constant": "CatchupRequest"
    },
    {
      "constant": "Value"
    },
    {
      "constant": "NumRounds"
    },
    {
      "constant": "Follower"
    },
    {
      "constant": "InitServer"
    },
    {
      "constant": "RequestVoteRequest"
    },
    {
      "variable": "history"
    },
    {
      "variable": "votesResponded"
    },
    {
      "variable": "nextIndex"
    },
    {
      "variable": "currentTerm"
    },
    {
      "variable": "votedFor"
    },
    {
      "variable": "matchIndex"
    },
    {
      "variable": "commitIndex"
    },
    {
      "variable": "state"
    },
    {
      "variable": "messages"
    },
    {
      "variable": "log"
    },
    {
      "variable": "votesGranted"
    },
    {
      "operator": "IsABag",
      "body": {
        "in": "B",
        "arg": {
          "funSet": {
            "domain": "B"
          },
          "arg": {
            "filter": {
              "key": "n",
              "value": {
                "set": "Nat"
              }
            },
            "that": {
              "gt": "n",
              "arg": 0
            }
          }
        }
      },
      "params": [
        {
          "name": "B",
          "arity": 0
        }
      ]
    },
    {
      "operator": "BagToSet",
      "body": {
        "domain": "B"
      },
      "params": [
        {
          "name": "B",
          "arity": 0
        }
      ]
    },
    {
      "operator": "SetToBag",
      "body": {
        "funDef": 1,
        "where": [
          {
            "key": "e",
            "value": "S"
          }
        ]
      },
      "params": [
        {
          "name": "S",
          "arity": 0
        }
      ]
    },
    {
      "operator": "\\oplus",
      "body": {
        "funDef": {
          "plus": {
            "if": {
              "in": "e",
              "arg": {
                "domain": "B1"
              }
            },
            "then": {
              "applyFun": "B1",
              "arg": "e"
            },
            "else": 0
          },
          "arg": {
            "if": {
              "in": "e",
              "arg": {
                "domain": "B2"
              }
            },
            "then": {
              "applyFun": "B2",
              "arg": "e"
            },
            "else": 0
          }
        },
        "where": [
          {
            "key": "e",
            "value": {
              "cup": {
                "domain": "B1"
              },
              "arg": {
                "domain": "B2"
              }
            }
          }
        ]
      },
      "params": [
        {
          "name": "B1",
          "arity": 0
        },
        {
          "name": "B2",
          "arity": 0
        }
      ]
    },
    {
      "operator": "\\ominus",
      "body": {
        "let": [
          {
            "operator": "B",
            "body": {
              "funDef": {
                "if": {
                  "in": "e",
                  "arg": {
                    "domain": "B2"
                  }
                },
                "then": {
                  "minus": {
                    "applyFun": "B1",
                    "arg": "e"
                  },
                  "arg": {
                    "applyFun": "B2",
                    "arg": "e"
                  }
                },
                "else": {
                  "applyFun": "B1",
                  "arg": "e"
                }
              },
              "where": [
                {
                  "key": "e",
                  "value": {
                    "domain": "B1"
                  }
                }
              ]
            },
            "params": [
              
            ]
          }
        ],
        "body": {
          "funDef": {
            "applyFun": {
              "applyOp": "B",
              "args": [
                
              ]
            },
            "arg": "e"
          },
          "where": [
            {
              "key": "e",
              "value": {
                "filter": {
                  "key": "d",
                  "value": {
                    "domain": {
                      "applyOp": "B",
                      "args": [
                        
                      ]
                    }
                  }
                },
                "that": {
                  "gt": {
                    "applyFun": {
                      "applyOp": "B",
                      "args": [
                        
                      ]
                    },
                    "arg": "d"
                  },
                  "arg": 0
                }
              }
            }
          ]
        }
      },
      "params": [
        {
          "name": "B1",
          "arity": 0
        },
        {
          "name": "B2",
          "arity": 0
        }
      ]
    },
    {
      "operator": "Sum",
      "body": {
        "let": [
          {
            "operator": "DSum",
            "body": {
              "recFunDef": {
                "let": [
                  {
                    "operator": "elt",
                    "body": {
                      "chooseBounded": {
                        "key": "e",
                        "value": "S"
                      },
                      "that": true
                    },
                    "params": [
                      
                    ]
                  }
                ],
                "body": {
                  "if": {
                    "eq": "S",
                    "arg": {
                      "enumSet": [
                        
                      ]
                    }
                  },
                  "then": 0,
                  "else": {
                    "plus": {
                      "applyFun": "f",
                      "arg": {
                        "applyOp": "elt",
                        "args": [
                          
                        ]
                      }
                    },
                    "arg": {
                      "applyFun": {
                        "applyOp": "recFunRef",
                        "args": [
                          
                        ]
                      },
                      "arg": {
                        "setminus": "S",
                        "arg": {
                          "enumSet": [
                            {
                              "applyOp": "elt",
                              "args": [
                                
                              ]
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              },
              "where": [
                {
                  "key": "S",
                  "value": {
                    "powerset": {
                      "domain": "f"
                    }
                  }
                }
              ]
            },
            "params": [
              
            ]
          }
        ],
        "body": {
          "applyFun": {
            "applyOp": "DSum",
            "args": [
              
            ]
          },
          "arg": {
            "domain": "f"
          }
        }
      },
      "params": [
        {
          "name": "f",
          "arity": 0
        }
      ]
    },
    {
      "operator": "\\sqsubseteq",
      "body": {
        "and": [
          {
            "subseteq": {
              "domain": "B1"
            },
            "arg": {
              "domain": "B2"
            }
          },
          {
            "forallBounded": {
              "key": "e",
              "value": {
                "domain": "B1"
              }
            },
            "that": {
              "le": {
                "applyFun": "B1",
                "arg": "e"
              },
              "arg": {
                "applyFun": "B2",
                "arg": "e"
              }
            }
          }
        ]
      },
      "params": [
        {
          "name": "B1",
          "arity": 0
        },
        {
          "name": "B2",
          "arity": 0
        }
      ]
    },
    {
      "operator": "ToSet",
      "body": {
        "map": {
          "applyFun": "s",
          "arg": "i"
        },
        "where": [
          {
            "key": "i",
            "value": {
              "domain": "s"
            }
          }
        ]
      },
      "params": [
        {
          "name": "s",
          "arity": 0
        }
      ]
    },
    {
      "operator": "SetToSeq",
      "body": {
        "chooseBounded": {
          "key": "f",
          "value": {
            "funSet": {
              "dotdot": 1,
              "arg": true
            },
            "arg": "S"
          }
        },
        "that": {
          "let": [
            {
              "operator": "LOCAL1530!IsInjective",
              "body": {
                "forallBounded": {
                  "key": "a",
                  "value": {
                    "domain": "f"
                  }
                },
                "that": {
                  "forallBounded": {
                    "key": "b",
                    "value": {
                      "domain": "f"
                    }
                  },
                  "that": {
                    "implies": {
                      "eq": {
                        "applyFun": "f",
                        "arg": "a"
                      },
                      "arg": {
                        "applyFun": "f",
                        "arg": "b"
                      }
                    },
                    "arg": {
                      "eq": "a",
                      "arg": "b"
                    }
                  }
                }
              },
              "params": [
                {
                  "name": "f",
                  "arity": 0
                }
              ]
            }
          ],
          "body": {
            "applyOp": "LOCAL1530!IsInjective",
            "args": [
              "f"
            ]
          }
        }
      },
      "params": [
        {
          "name": "S",
          "arity": 0
        }
      ]
    },
    {
      "operator": "TupleOf",
      "body": {
        "funSet": {
          "dotdot": 1,
          "arg": "n"
        },
        "arg": "set"
      },
      "params": [
        {
          "name": "set",
          "arity": 0
        },
        {
          "name": "n",
          "arity": 0
        }
      ]
    },
    {
      "operator": "SeqOf",
      "body": {
        "union": {
          "map": {
            "funSet": {
              "dotdot": 1,
              "arg": "m"
            },
            "arg": "set"
          },
          "where": [
            {
              "key": "m",
              "value": {
                "dotdot": 0,
                "arg": "n"
              }
            }
          ]
        }
      },
      "params": [
        {
          "name": "set",
          "arity": 0
        },
        {
          "name": "n",
          "arity": 0
        }
      ]
    },
    {
      "operator": "Contains",
      "body": {
        "existsBounded": {
          "key": "i",
          "value": {
            "dotdot": 1,
            "arg": true
          }
        },
        "that": {
          "eq": {
            "applyFun": "s",
            "arg": "i"
          },
          "arg": "e"
        }
      },
      "params": [
        {
          "name": "s",
          "arity": 0
        },
        {
          "name": "e",
          "arity": 0
        }
      ]
    },
    {
      "operator": "Remove",
      "body": true,
      "params": [
        {
          "name": "s",
          "arity": 0
        },
        {
          "name": "e",
          "arity": 0
        }
      ]
    },
    {
      "operator": "ReplaceAll",
      "body": {
        "let": [
          {
            "operator": "F",
            "body": {
              "recFunDef": {
                "if": {
                  "eq": "i",
                  "arg": 0
                },
                "then": {
                  "tuple": [
                    
                  ]
                },
                "else": {
                  "if": {
                    "eq": {
                      "applyFun": "s",
                      "arg": "i"
                    },
                    "arg": "old"
                  },
                  "then": true,
                  "else": true
                }
              },
              "where": [
                {
                  "key": "i",
                  "value": {
                    "dotdot": 0,
                    "arg": true
                  }
                }
              ]
            },
            "params": [
              
            ]
          }
        ],
        "body": {
          "applyFun": {
            "applyOp": "F",
            "args": [
              
            ]
          },
          "arg": true
        }
      },
      "params": [
        {
          "name": "s",
          "arity": 0
        },
        {
          "name": "old",
          "arity": 0
        },
        {
          "name": "new",
          "arity": 0
        }
      ]
    },
    {
      "operator": "InsertAt",
      "body": {
        "concat": {
          "concat": true,
          "arg": {
            "tuple": [
              "e"
            ]
          }
        },
        "arg": true
      },
      "params": [
        {
          "name": "s",
          "arity": 0
        },
        {
          "name": "i",
          "arity": 0
        },
        {
          "name": "e",
          "arity": 0
        }
      ]
    },
    {
      "operator": "ReplaceAt",
      "body": {
        "except": "s",
        "where": [
          {
            "key": {
              "tuple": [
                "i"
              ]
            },
            "value": "e"
          }
        ]
      },
      "params": [
        {
          "name": "s",
          "arity": 0
        },
        {
          "name": "i",
          "arity": 0
        },
        {
          "name": "e",
          "arity": 0
        }
      ]
    },
    {
      "operator": "RemoveAt",
      "body": {
        "concat": true,
        "arg": true
      },
      "params": [
        {
          "name": "s",
          "arity": 0
        },
        {
          "name": "i",
          "arity": 0
        }
      ]
    },
    {
      "operator": "Cons",
      "body": {
        "concat": {
          "tuple": [
            "elt"
          ]
        },
        "arg": "seq"
      },
      "params": [
        {
          "name": "elt",
          "arity": 0
        },
        {
          "name": "seq",
          "arity": 0
        }
      ]
    },
    {
      "operator": "Front",
      "body": true,
      "params": [
        {
          "name": "s",
          "arity": 0
        }
      ]
    },
    {
      "operator": "Last",
      "body": {
        "applyFun": "s",
        "arg": true
      },
      "params": [
        {
          "name": "s",
          "arity": 0
        }
      ]
    },
    {
      "operator": "IsPrefix",
      "body": {
        "and": [
          {
            "subseteq": {
              "domain": "s"
            },
            "arg": {
              "domain": "t"
            }
          },
          {
            "forallBounded": {
              "key": "i",
              "value": {
                "domain": "s"
              }
            },
            "that": {
              "eq": {
                "applyFun": "s",
                "arg": "i"
              },
              "arg": {
                "applyFun": "t",
                "arg": "i"
              }
            }
          }
        ]
      },
      "params": [
        {
          "name": "s",
          "arity": 0
        },
        {
          "name": "t",
          "arity": 0
        }
      ]
    },
    {
      "operator": "SeqMod",
      "body": {
        "if": {
          "eq": {
            "mod": "a",
            "arg": "b"
          },
          "arg": 0
        },
        "then": "b",
        "else": {
          "mod": "a",
          "arg": "b"
        }
      },
      "params": [
        {
          "name": "a",
          "arity": 0
        },
        {
          "name": "b",
          "arity": 0
        }
      ]
    },
    {
      "operator": "MaxLogLength",
      "body": 5,
      "params": [
        
      ]
    },
    {
      "operator": "MaxRestarts",
      "body": 2,
      "params": [
        
      ]
    },
    {
      "operator": "MaxTimeouts",
      "body": 3,
      "params": [
        
      ]
    },
    {
      "operator": "MaxClientRequests",
      "body": 3,
      "params": [
        
      ]
    },
    {
      "operator": "MaxMembershipChanges",
      "body": 3,
      "params": [
        
      ]
    },
    {
      "operator": "Quorum",
      "body": {
        "filter": {
          "key": "i",
          "value": {
            "powerset": "config"
          }
        },
        "that": {
          "gt": {
            "mult": true,
            "arg": 2
          },
          "arg": true
        }
      },
      "params": [
        {
          "name": "config",
          "arity": 0
        }
      ]
    },
    {
      "operator": "LastTerm",
      "body": {
        "if": {
          "eq": true,
          "arg": 0
        },
        "then": 0,
        "else": {
          "applyFun": {
            "applyFun": "xlog",
            "arg": true
          },
          "arg": {
            "str": "term"
          }
        }
      },
      "params": [
        {
          "name": "xlog",
          "arity": 0
        }
      ]
    },
    {
      "operator": "Min",
      "body": {
        "chooseBounded": {
          "key": "x",
          "value": "s"
        },
        "that": {
          "forallBounded": {
            "key": "y",
            "value": "s"
          },
          "that": {
            "le": "x",
            "arg": "y"
          }
        }
      },
      "params": [
        {
          "name": "s",
          "arity": 0
        }
      ]
    },
    {
      "operator": "Max",
      "body": {
        "chooseBounded": {
          "key": "x",
          "value": "s"
        },
        "that": {
          "forallBounded": {
            "key": "y",
            "value": "s"
          },
          "that": {
            "ge": "x",
            "arg": "y"
          }
        }
      },
      "params": [
        {
          "name": "s",
          "arity": 0
        }
      ]
    },
    {
      "operator": "BagIn",
      "body": {
        "in": "e",
        "arg": {
          "applyOp": "BagToSet",
          "args": [
            "B"
          ]
        }
      },
      "params": [
        {
          "name": "e",
          "arity": 0
        },
        {
          "name": "B",
          "arity": 0
        }
      ]
    },
    {
      "operator": "EmptyBag",
      "body": {
        "applyOp": "SetToBag",
        "args": [
          {
            "enumSet": [
              
            ]
          }
        ]
      },
      "params": [
        
      ]
    },
    {
      "operator": "BagUnion",
      "body": {
        "funDef": {
          "applyOp": "Sum",
          "args": [
            {
              "funDef": {
                "if": {
                  "applyOp": "BagIn",
                  "args": [
                    "e",
                    "B"
                  ]
                },
                "then": {
                  "applyFun": "B",
                  "arg": "e"
                },
                "else": 0
              },
              "where": [
                {
                  "key": "B",
                  "value": "S"
                }
              ]
            }
          ]
        },
        "where": [
          {
            "key": "e",
            "value": {
              "union": {
                "map": {
                  "applyOp": "BagToSet",
                  "args": [
                    "B"
                  ]
                },
                "where": [
                  {
                    "key": "B",
                    "value": "S"
                  }
                ]
              }
            }
          }
        ]
      },
      "params": [
        {
          "name": "S",
          "arity": 0
        }
      ]
    },
    {
      "operator": "BagOfAll",
      "body": {
        "funDef": {
          "applyOp": "Sum",
          "args": [
            {
              "funDef": {
                "if": {
                  "eq": {
                    "applyOp": "F",
                    "args": [
                      "d"
                    ]
                  },
                  "arg": "e"
                },
                "then": {
                  "applyFun": "B",
                  "arg": "d"
                },
                "else": 0
              },
              "where": [
                {
                  "key": "d",
                  "value": {
                    "applyOp": "BagToSet",
                    "args": [
                      "B"
                    ]
                  }
                }
              ]
            }
          ]
        },
        "where": [
          {
            "key": "e",
            "value": {
              "map": {
                "applyOp": "F",
                "args": [
                  "d"
                ]
              },
              "where": [
                {
                  "key": "d",
                  "value": {
                    "applyOp": "BagToSet",
                    "args": [
                      "B"
                    ]
                  }
                }
              ]
            }
          }
        ]
      },
      "params": [
        {
          "name": "F",
          "arity": 1
        },
        {
          "name": "B",
          "arity": 0
        }
      ]
    },
    {
      "operator": "BagCardinality",
      "body": {
        "applyOp": "Sum",
        "args": [
          "B"
        ]
      },
      "params": [
        {
          "name": "B",
          "arity": 0
        }
      ]
    },
    {
      "operator": "BoundedSeq",
      "body": {
        "applyOp": "SeqOf",
        "args": [
          "S",
          "n"
        ]
      },
      "params": [
        {
          "name": "S",
          "arity": 0
        },
        {
          "name": "n",
          "arity": 0
        }
      ]
    },
    {
      "operator": "IsStrictPrefix",
      "body": {
        "and": [
          {
            "applyOp": "IsPrefix",
            "args": [
              "s",
              "t"
            ]
          },
          {
            "ne": "s",
            "arg": "t"
          }
        ]
      },
      "params": [
        {
          "name": "s",
          "arity": 0
        },
        {
          "name": "t",
          "arity": 0
        }
      ]
    },
    {
      "operator": "MaxTerms",
      "body": {
        "plus": {
          "applyOp": "MaxTimeouts",
          "args": [
            
          ]
        },
        "arg": 1
      },
      "params": [
        
      ]
    },
    {
      "operator": "MaxTriedMembershipChanges",
      "body": {
        "plus": {
          "applyOp": "MaxMembershipChanges",
          "args": [
            
          ]
        },
        "arg": 1
      },
      "params": [
        
      ]
    },
    {
      "operator": "MaxInFlightMessages",
      "body": {
        "let": [
          {
            "operator": "card",
            "body": true,
            "params": [
              
            ]
          }
        ],
        "body": {
          "mult": {
            "mult": 2,
            "arg": {
              "applyOp": "card",
              "args": [
                
              ]
            }
          },
          "arg": {
            "applyOp": "card",
            "args": [
              
            ]
          }
        }
      },
      "params": [
        
      ]
    },
    {
      "operator": "EmptyRVReqMsg",
      "body": {
        "record": [
          {
            "key": {
              "str": "mtype"
            },
            "value": "RequestVoteRequest"
          },
          {
            "key": {
              "str": "mterm"
            },
            "value": 0
          },
          {
            "key": {
              "str": "mlastLogTerm"
            },
            "value": 0
          },
          {
            "key": {
              "str": "mlastLogIndex"
            },
            "value": 0
          },
          {
            "key": {
              "str": "msource"
            },
            "value": "Nil"
          },
          {
            "key": {
              "str": "mdest"
            },
            "value": "Nil"
          }
        ]
      },
      "params": [
        
      ]
    },
    {
      "operator": "EmptyAEReqMsg",
      "body": {
        "record": [
          {
            "key": {
              "str": "mtype"
            },
            "value": "AppendEntriesRequest"
          },
          {
            "key": {
              "str": "mterm"
            },
            "value": 0
          },
          {
            "key": {
              "str": "mprevLogIndex"
            },
            "value": 0
          },
          {
            "key": {
              "str": "mprevLogTerm"
            },
            "value": 0
          },
          {
            "key": {
              "str": "mentries"
            },
            "value": {
              "tuple": [
                
              ]
            }
          },
          {
            "key": {
              "str": "mcommitIndex"
            },
            "value": "Nil"
          },
          {
            "key": {
              "str": "msource"
            },
            "value": "Nil"
          },
          {
            "key": {
              "str": "mdest"
            },
            "value": "Nil"
          }
        ]
      },
      "params": [
        
      ]
    },
    {
      "operator": "EmptyRVRespMsg",
      "body": {
        "record": [
          {
            "key": {
              "str": "mtype"
            },
            "value": "RequestVoteResponse"
          },
          {
            "key": {
              "str": "mterm"
            },
            "value": "Nil"
          },
          {
            "key": {
              "str": "mvoteGranted"
            },
            "value": false
          },
          {
            "key": {
              "str": "mlog"
            },
            "value": {
              "tuple": [
                
              ]
            }
          },
          {
            "key": {
              "str": "msource"
            },
            "value": "Nil"
          },
          {
            "key": {
              "str": "mdest"
            },
            "value": "Nil"
          }
        ]
      },
      "params": [
        
      ]
    },
    {
      "operator": "EmptyAERespMsg",
      "body": {
        "record": [
          {
            "key": {
              "str": "mtype"
            },
            "value": "AppendEntriesResponse"
          },
          {
            "key": {
              "str": "mterm"
            },
            "value": 0
          },
          {
            "key": {
              "str": "msuccess"
            },
            "value": false
          },
          {
            "key": {
              "str": "mmatchIndex"
            },
            "value": 0
          },
          {
            "key": {
              "str": "msource"
            },
            "value": "Nil"
          },
          {
            "key": {
              "str": "mdest"
            },
            "value": "Nil"
          }
        ]
      },
      "params": [
        
      ]
    },
    {
      "operator": "serverVars",
      "body": {
        "tuple": [
          "currentTerm",
          "state",
          "votedFor"
        ]
      },
      "params": [
        
      ]
    },
    {
      "operator": "logVars",
      "body": {
        "tuple": [
          "log",
          "commitIndex"
        ]
      },
      "params": [
        
      ]
    },
    {
      "operator": "candidateVars",
      "body": {
        "tuple": [
          "votesResponded",
          "votesGranted"
        ]
      },
      "params": [
        
      ]
    },
    {
      "operator": "leaderVars",
      "body": {
        "tuple": [
          "nextIndex",
          "matchIndex"
        ]
      },
      "params": [
        
      ]
    },
    {
      "operator": "systemState",
      "body": {
        "record": [
          {
            "key": {
              "str": "messages"
            },
            "value": "messages"
          },
          {
            "key": {
              "str": "currentTerm"
            },
            "value": "currentTerm"
          },
          {
            "key": {
              "str": "state"
            },
            "value": "state"
          },
          {
            "key": {
              "str": "votedFor"
            },
            "value": "votedFor"
          },
          {
            "key": {
              "str": "votesResponded"
            },
            "value": "votesResponded"
          },
          {
            "key": {
              "str": "votesGranted"
            },
            "value": "votesGranted"
          },
          {
            "key": {
              "str": "nextIndex"
            },
            "value": "nextIndex"
          },
          {
            "key": {
              "str": "matchIndex"
            },
            "value": "matchIndex"
          },
          {
            "key": {
              "str": "log"
            },
            "value": "log"
          },
          {
            "key": {
              "str": "commitIndex"
            },
            "value": "commitIndex"
          }
        ]
      },
      "params": [
        
      ]
    },
    {
      "operator": "WithMessage",
      "body": {
        "applyOp": "\\oplus",
        "args": [
          "msgs",
          {
            "applyOp": "SetToBag",
            "args": [
              {
                "enumSet": [
                  "m"
                ]
              }
            ]
          }
        ]
      },
      "params": [
        {
          "name": "m",
          "arity": 0
        },
        {
          "name": "msgs",
          "arity": 0
        }
      ]
    },
    {
      "operator": "WithoutMessage",
      "body": {
        "applyOp": "\\ominus",
        "args": [
          "msgs",
          {
            "applyOp": "SetToBag",
            "args": [
              {
                "enumSet": [
                  "m"
                ]
              }
            ]
          }
        ]
      },
      "params": [
        {
          "name": "m",
          "arity": 0
        },
        {
          "name": "msgs",
          "arity": 0
        }
      ]
    },
    {
      "operator": "MaxOrZero",
      "body": {
        "if": {
          "eq": "s",
          "arg": {
            "enumSet": [
              
            ]
          }
        },
        "then": 0,
        "else": {
          "applyOp": "Max",
          "args": [
            "s"
          ]
        }
      },
      "params": [
        {
          "name": "s",
          "arity": 0
        }
      ]
    },
    {
      "operator": "GetHistoricalMaxConfigIndex",
      "body": {
        "let": [
          {
            "operator": "configIndexes",
            "body": {
              "filter": {
                "key": "index",
                "value": {
                  "dotdot": 1,
                  "arg": true
                }
              },
              "that": {
                "eq": {
                  "applyFun": {
                    "applyFun": {
                      "applyFun": {
                        "applyFun": "s",
                        "arg": {
                          "str": "log"
                        }
                      },
                      "arg": "i"
                    },
                    "arg": "index"
                  },
                  "arg": {
                    "str": "type"
                  }
                },
                "arg": "ConfigEntry"
              }
            },
            "params": [
              
            ]
          }
        ],
        "body": {
          "if": {
            "eq": {
              "applyOp": "configIndexes",
              "args": [
                
              ]
            },
            "arg": {
              "enumSet": [
                
              ]
            }
          },
          "then": 0,
          "else": {
            "applyOp": "Max",
            "args": [
              {
                "applyOp": "configIndexes",
                "args": [
                  
                ]
              }
            ]
          }
        }
      },
      "params": [
        {
          "name": "i",
          "arity": 0
        },
        {
          "name": "s",
          "arity": 0
        }
      ]
    },
    {
      "operator": "CurrentLeaders",
      "body": {
        "filter": {
          "key": "i",
          "value": "Server"
        },
        "that": {
          "eq": {
            "applyFun": "state",
            "arg": "i"
          },
          "arg": "Leader"
        }
      },
      "params": [
        
      ]
    },
    {
      "operator": "InitServerVars",
      "body": {
        "and": [
          {
            "eq": "currentTerm",
            "arg": {
              "funDef": 1,
              "where": [
                {
                  "key": "i",
                  "value": "Server"
                }
              ]
            }
          },
          {
            "eq": "state",
            "arg": {
              "funDef": "Follower",
              "where": [
                {
                  "key": "i",
                  "value": "Server"
                }
              ]
            }
          },
          {
            "eq": "votedFor",
            "arg": {
              "funDef": "Nil",
              "where": [
                {
                  "key": "i",
                  "value": "Server"
                }
              ]
            }
          }
        ]
      },
      "params": [
        
      ]
    },
    {
      "operator": "InitCandidateVars",
      "body": {
        "and": [
          {
            "eq": "votesResponded",
            "arg": {
              "funDef": {
                "enumSet": [
                  
                ]
              },
              "where": [
                {
                  "key": "i",
                  "value": "Server"
                }
              ]
            }
          },
          {
            "eq": "votesGranted",
            "arg": {
              "funDef": {
                "enumSet": [
                  
                ]
              },
              "where": [
                {
                  "key": "i",
                  "value": "Server"
                }
              ]
            }
          }
        ]
      },
      "params": [
        
      ]
    },
    {
      "operator": "InitLeaderVars",
      "body": {
        "and": [
          {
            "eq": "nextIndex",
            "arg": {
              "funDef": {
                "funDef": 1,
                "where": [
                  {
                    "key": "j",
                    "value": "Server"
                  }
                ]
              },
              "where": [
                {
                  "key": "i",
                  "value": "Server"
                }
              ]
            }
          },
          {
            "eq": "matchIndex",
            "arg": {
              "funDef": {
                "funDef": 0,
                "where": [
                  {
                    "key": "j",
                    "value": "Server"
                  }
                ]
              },
              "where": [
                {
                  "key": "i",
                  "value": "Server"
                }
              ]
            }
          }
        ]
      },
      "params": [
        
      ]
    },
    {
      "operator": "InitLogVars",
      "body": {
        "and": [
          {
            "eq": "log",
            "arg": {
              "funDef": {
                "tuple": [
                  
                ]
              },
              "where": [
                {
                  "key": "i",
                  "value": "Server"
                }
              ]
            }
          },
          {
            "eq": "commitIndex",
            "arg": {
              "funDef": 0,
              "where": [
                {
                  "key": "i",
                  "value": "Server"
                }
              ]
            }
          }
        ]
      },
      "params": [
        
      ]
    },
    {
      "operator": "InitHistory",
      "body": {
        "record": [
          {
            "key": {
              "str": "server"
            },
            "value": {
              "funDef": {
                "record": [
                  {
                    "key": {
                      "str": "restarted"
                    },
                    "value": 0
                  },
                  {
                    "key": {
                      "str": "timeout"
                    },
                    "value": 0
                  }
                ]
              },
              "where": [
                {
                  "key": "i",
                  "value": "Server"
                }
              ]
            }
          },
          {
            "key": {
              "str": "global"
            },
            "value": {
              "tuple": [
                
              ]
            }
          },
          {
            "key": {
              "str": "hadNumLeaders"
            },
            "value": 0
          },
          {
            "key": {
              "str": "hadNumClientRequests"
            },
            "value": 0
          },
          {
            "key": {
              "str": "hadNumTriedMembershipChanges"
            },
            "value": 0
          },
          {
            "key": {
              "str": "hadNumMembershipChanges"
            },
            "value": 0
          }
        ]
      },
      "params": [
        
      ]
    },
    {
      "operator": "Restart",
      "body": {
        "and": [
          {
            "eq": {
              "prime": "state"
            },
            "arg": {
              "except": "state",
              "where": [
                {
                  "key": {
                    "tuple": [
                      "i"
                    ]
                  },
                  "value": "Follower"
                }
              ]
            }
          },
          {
            "eq": {
              "prime": "votesResponded"
            },
            "arg": {
              "except": "votesResponded",
              "where": [
                {
                  "key": {
                    "tuple": [
                      "i"
                    ]
                  },
                  "value": {
                    "enumSet": [
                      
                    ]
                  }
                }
              ]
            }
          },
          {
            "eq": {
              "prime": "votesGranted"
            },
            "arg": {
              "except": "votesGranted",
              "where": [
                {
                  "key": {
                    "tuple": [
                      "i"
                    ]
                  },
                  "value": {
                    "enumSet": [
                      
                    ]
                  }
                }
              ]
            }
          },
          {
            "eq": {
              "prime": "nextIndex"
            },
            "arg": {
              "except": "nextIndex",
              "where": [
                {
                  "key": {
                    "tuple": [
                      "i"
                    ]
                  },
                  "value": {
                    "funDef": 1,
                    "where": [
                      {
                        "key": "j",
                        "value": "Server"
                      }
                    ]
                  }
                }
              ]
            }
          },
          {
            "eq": {
              "prime": "matchIndex"
            },
            "arg": {
              "except": "matchIndex",
              "where": [
                {
                  "key": {
                    "tuple": [
                      "i"
                    ]
                  },
                  "value": {
                    "funDef": 0,
                    "where": [
                      {
                        "key": "j",
                        "value": "Server"
                      }
                    ]
                  }
                }
              ]
            }
          },
          {
            "eq": {
              "prime": "commitIndex"
            },
            "arg": {
              "except": "commitIndex",
              "where": [
                {
                  "key": {
                    "tuple": [
                      "i"
                    ]
                  },
                  "value": 0
                }
              ]
            }
          },
          {
            "eq": {
              "prime": "history"
            },
            "arg": {
              "except": "history",
              "where": [
                {
                  "key": {
                    "tuple": [
                      {
                        "str": "server"
                      },
                      "i",
                      {
                        "str": "restarted"
                      }
                    ]
                  },
                  "value": {
                    "plus": {
                      "applyFun": {
                        "applyFun": {
                          "applyFun": "history",
                          "arg": {
                            "str": "server"
                          }
                        },
                        "arg": "i"
                      },
                      "arg": {
                        "str": "restarted"
                      }
                    },
                    "arg": 1
                  }
                },
                {
                  "key": {
                    "tuple": [
                      {
                        "str": "global"
                      }
                    ]
                  },
                  "value": true
                }
              ]
            }
          },
          {
            "unchanged": {
              "tuple": [
                "messages",
                "currentTerm",
                "votedFor",
                "log"
              ]
            }
          }
        ]
      },
      "params": [
        {
          "name": "i",
          "arity": 0
        }
      ]
    },
    {
      "operator": "Committed",
      "body": true,
      "params": [
        {
          "name": "i",
          "arity": 0
        }
      ]
    },
    {
      "operator": "MessageTermsLtCurrentTerm",
      "body": {
        "le": {
          "applyFun": "m",
          "arg": {
            "str": "mterm"
          }
        },
        "arg": {
          "applyFun": "currentTerm",
          "arg": {
            "applyFun": "m",
            "arg": {
              "str": "msource"
            }
          }
        }
      },
      "params": [
        {
          "name": "m",
          "arity": 0
        }
      ]
    },
    {
      "operator": "LeaderVotesQuorum",
      "body": {
        "implies": {
          "eq": {
            "applyFun": "history",
            "arg": {
              "str": "hadNumMembershipChanges"
            }
          },
          "arg": 0
        },
        "arg": {
          "forallBounded": {
            "key": "i",
            "value": "Server"
          },
          "that": {
            "implies": {
              "eq": {
                "applyFun": "state",
                "arg": "i"
              },
              "arg": "Leader"
            },
            "arg": {
              "in": {
                "filter": {
                  "key": "j",
                  "value": "Server"
                },
                "that": {
                  "or": [
                    {
                      "gt": {
                        "applyFun": "currentTerm",
                        "arg": "j"
                      },
                      "arg": {
                        "applyFun": "currentTerm",
                        "arg": "i"
                      }
                    },
                    {
                      "and": [
                        {
                          "eq": {
                            "applyFun": "currentTerm",
                            "arg": "j"
                          },
                          "arg": {
                            "applyFun": "currentTerm",
                            "arg": "i"
                          }
                        },
                        {
                          "eq": {
                            "applyFun": "votedFor",
                            "arg": "j"
                          },
                          "arg": "i"
                        }
                      ]
                    }
                  ]
                }
              },
              "arg": {
                "applyOp": "Quorum",
                "args": [
                  {
                    "applyOp": "GetConfig",
                    "args": [
                      "i"
                    ]
                  }
                ]
              }
            }
          }
        }
      },
      "params": [
        
      ]
    },
    {
      "operator": "CandidateTermNotInLog",
      "body": {
        "implies": {
          "eq": {
            "applyFun": "history",
            "arg": {
              "str": "hadNumMembershipChanges"
            }
          },
          "arg": 0
        },
        "arg": {
          "forallBounded": {
            "key": "i",
            "value": "Server"
          },
          "that": {
            "implies": {
              "and": [
                {
                  "eq": {
                    "applyFun": "state",
                    "arg": "i"
                  },
                  "arg": "Candidate"
                },
                {
                  "in": {
                    "filter": {
                      "key": "j",
                      "value": "Server"
                    },
                    "that": {
                      "and": [
                        {
                          "eq": {
                            "applyFun": "currentTerm",
                            "arg": "j"
                          },
                          "arg": {
                            "applyFun": "currentTerm",
                            "arg": "i"
                          }
                        },
                        {
                          "in": {
                            "applyFun": "votedFor",
                            "arg": "j"
                          },
                          "arg": {
                            "enumSet": [
                              "i",
                              "Nil"
                            ]
                          }
                        }
                      ]
                    }
                  },
                  "arg": {
                    "applyOp": "Quorum",
                    "args": [
                      {
                        "applyOp": "GetConfig",
                        "args": [
                          "i"
                        ]
                      }
                    ]
                  }
                }
              ]
            },
            "arg": {
              "forallBounded": {
                "key": "j",
                "value": "Server"
              },
              "that": {
                "forallBounded": {
                  "key": "n",
                  "value": {
                    "domain": {
                      "applyFun": "log",
                      "arg": "j"
                    }
                  }
                },
                "that": {
                  "ne": {
                    "applyFun": {
                      "applyFun": {
                        "applyFun": "log",
                        "arg": "j"
                      },
                      "arg": "n"
                    },
                    "arg": {
                      "str": "term"
                    }
                  },
                  "arg": {
                    "applyFun": "currentTerm",
                    "arg": "i"
                  }
                }
              }
            }
          }
        }
      },
      "params": [
        
      ]
    },
    {
      "operator": "LogMatching",
      "body": {
        "forallBounded": {
          "key": "i",
          "value": "Server"
        },
        "that": {
          "forallBounded": {
            "key": "j",
            "value": "Server"
          },
          "that": {
            "forallBounded": {
              "key": "n",
              "value": {
                "cap": {
                  "dotdot": 1,
                  "arg": true
                },
                "arg": {
                  "dotdot": 1,
                  "arg": true
                }
              }
            },
            "that": {
              "implies": {
                "eq": {
                  "applyFun": {
                    "applyFun": {
                      "applyFun": "log",
                      "arg": "i"
                    },
                    "arg": "n"
                  },
                  "arg": {
                    "str": "term"
                  }
                },
                "arg": {
                  "applyFun": {
                    "applyFun": {
                      "applyFun": "log",
                      "arg": "j"
                    },
                    "arg": "n"
                  },
                  "arg": {
                    "str": "term"
                  }
                }
              },
              "arg": {
                "eq": true,
                "arg": true
              }
            }
          }
        }
      },
      "params": [
        
      ]
    },
    {
      "operator": "VotesGrantedInv",
      "body": {
        "forallBounded": {
          "key": "i",
          "value": "Server"
        },
        "that": {
          "forallBounded": {
            "key": "j",
            "value": {
              "applyFun": "votesGranted",
              "arg": "i"
            }
          },
          "that": {
            "implies": {
              "eq": {
                "applyFun": "currentTerm",
                "arg": "i"
              },
              "arg": {
                "applyFun": "currentTerm",
                "arg": "j"
              }
            },
            "arg": {
              "applyOp": "IsPrefix",
              "args": [
                {
                  "applyOp": "Committed",
                  "args": [
                    "j"
                  ]
                },
                {
                  "applyFun": "log",
                  "arg": "i"
                }
              ]
            }
          }
        }
      },
      "params": [
        
      ]
    },
    {
      "operator": "QuorumLogInv",
      "body": {
        "forallBounded": {
          "key": "i",
          "value": "Server"
        },
        "that": {
          "forallBounded": {
            "key": "S",
            "value": {
              "applyOp": "Quorum",
              "args": [
                {
                  "applyOp": "GetConfig",
                  "args": [
                    "i"
                  ]
                }
              ]
            }
          },
          "that": {
            "existsBounded": {
              "key": "j",
              "value": "S"
            },
            "that": {
              "applyOp": "IsPrefix",
              "args": [
                {
                  "applyOp": "Committed",
                  "args": [
                    "i"
                  ]
                },
                {
                  "applyFun": "log",
                  "arg": "j"
                }
              ]
            }
          }
        }
      },
      "params": [
        
      ]
    },
    {
      "operator": "MoreUpToDateCorrect",
      "body": {
        "forallBounded": {
          "key": "i",
          "value": "Server"
        },
        "that": {
          "forallBounded": {
            "key": "j",
            "value": "Server"
          },
          "that": {
            "implies": {
              "or": [
                {
                  "gt": {
                    "applyOp": "LastTerm",
                    "args": [
                      {
                        "applyFun": "log",
                        "arg": "i"
                      }
                    ]
                  },
                  "arg": {
                    "applyOp": "LastTerm",
                    "args": [
                      {
                        "applyFun": "log",
                        "arg": "j"
                      }
                    ]
                  }
                },
                {
                  "and": [
                    {
                      "eq": {
                        "applyOp": "LastTerm",
                        "args": [
                          {
                            "applyFun": "log",
                            "arg": "i"
                          }
                        ]
                      },
                      "arg": {
                        "applyOp": "LastTerm",
                        "args": [
                          {
                            "applyFun": "log",
                            "arg": "j"
                          }
                        ]
                      }
                    },
                    {
                      "ge": true,
                      "arg": true
                    }
                  ]
                }
              ]
            },
            "arg": {
              "applyOp": "IsPrefix",
              "args": [
                {
                  "applyOp": "Committed",
                  "args": [
                    "j"
                  ]
                },
                {
                  "applyFun": "log",
                  "arg": "i"
                }
              ]
            }
          }
        }
      },
      "params": [
        
      ]
    },
    {
      "operator": "LeaderCompleteness",
      "body": {
        "forallBounded": {
          "key": "i",
          "value": "Server"
        },
        "that": {
          "implies": {
            "eq": {
              "applyFun": "state",
              "arg": "i"
            },
            "arg": "Leader"
          },
          "arg": {
            "forallBounded": {
              "key": "j",
              "value": "Server"
            },
            "that": {
              "applyOp": "IsPrefix",
              "args": [
                {
                  "applyOp": "Committed",
                  "args": [
                    "j"
                  ]
                },
                {
                  "applyFun": "log",
                  "arg": "i"
                }
              ]
            }
          }
        }
      },
      "params": [
        
      ]
    },
    {
      "operator": "BoundedRequestVote",
      "body": {
        "forallBounded": {
          "key": "m",
          "value": {
            "domain": "messages"
          }
        },
        "that": {
          "implies": {
            "eq": {
              "applyFun": "m",
              "arg": {
                "str": "mtype"
              }
            },
            "arg": "RequestVoteRequest"
          },
          "arg": {
            "le": {
              "applyFun": "messages",
              "arg": "m"
            },
            "arg": 1
          }
        }
      },
      "params": [
        
      ]
    },
    {
      "operator": "BoundedLogSize",
      "body": {
        "forallBounded": {
          "key": "i",
          "value": "Server"
        },
        "that": {
          "le": true,
          "arg": {
            "applyOp": "MaxLogLength",
            "args": [
              
            ]
          }
        }
      },
      "params": [
        
      ]
    },
    {
      "operator": "BoundedRestarts",
      "body": {
        "forallBounded": {
          "key": "i",
          "value": "Server"
        },
        "that": {
          "le": {
            "applyFun": {
              "applyFun": {
                "applyFun": "history",
                "arg": {
                  "str": "server"
                }
              },
              "arg": "i"
            },
            "arg": {
              "str": "restarted"
            }
          },
          "arg": {
            "applyOp": "MaxRestarts",
            "args": [
              
            ]
          }
        }
      },
      "params": [
        
      ]
    },
    {
      "operator": "BoundedTimeouts",
      "body": {
        "forallBounded": {
          "key": "i",
          "value": "Server"
        },
        "that": {
          "le": {
            "applyFun": {
              "applyFun": {
                "applyFun": "history",
                "arg": {
                  "str": "server"
                }
              },
              "arg": "i"
            },
            "arg": {
              "str": "timeout"
            }
          },
          "arg": {
            "applyOp": "MaxTimeouts",
            "args": [
              
            ]
          }
        }
      },
      "params": [
        
      ]
    },
    {
      "operator": "BoundedClientRequests",
      "body": {
        "le": {
          "applyFun": "history",
          "arg": {
            "str": "hadNumClientRequests"
          }
        },
        "arg": {
          "applyOp": "MaxClientRequests",
          "args": [
            
          ]
        }
      },
      "params": [
        
      ]
    },
    {
      "operator": "BoundedMembershipChanges",
      "body": {
        "le": {
          "applyFun": "history",
          "arg": {
            "str": "hadNumMembershipChanges"
          }
        },
        "arg": {
          "applyOp": "MaxMembershipChanges",
          "args": [
            
          ]
        }
      },
      "params": [
        
      ]
    },
    {
      "operator": "ElectionsUncontested",
      "body": {
        "le": true,
        "arg": 1
      },
      "params": [
        
      ]
    },
    {
      "operator": "CleanStartUntilTwoLeaders",
      "body": {
        "implies": {
          "lt": {
            "applyFun": "history",
            "arg": {
              "str": "hadNumLeaders"
            }
          },
          "arg": 2
        },
        "arg": {
          "and": [
            {
              "le": {
                "applyOp": "Sum",
                "args": [
                  {
                    "funDef": {
                      "applyFun": {
                        "applyFun": {
                          "applyFun": "history",
                          "arg": {
                            "str": "server"
                          }
                        },
                        "arg": "i"
                      },
                      "arg": {
                        "str": "restarted"
                      }
                    },
                    "where": [
                      {
                        "key": "i",
                        "value": "Server"
                      }
                    ]
                  }
                ]
              },
              "arg": 1
            },
            {
              "le": {
                "applyOp": "Sum",
                "args": [
                  {
                    "funDef": {
                      "applyFun": {
                        "applyFun": {
                          "applyFun": "history",
                          "arg": {
                            "str": "server"
                          }
                        },
                        "arg": "i"
                      },
                      "arg": {
                        "str": "timeout"
                      }
                    },
                    "where": [
                      {
                        "key": "i",
                        "value": "Server"
                      }
                    ]
                  }
                ]
              },
              "arg": 2
            }
          ]
        }
      },
      "params": [
        
      ]
    },
    {
      "operator": "BoundedTrace",
      "body": {
        "le": true,
        "arg": 24
      },
      "params": [
        
      ]
    },
    {
      "operator": "FirstBecomeLeader",
      "body": {
        "not": {
          "existsBounded": {
            "key": "i",
            "value": {
              "domain": {
                "applyFun": "history",
                "arg": {
                  "str": "global"
                }
              }
            }
          },
          "that": {
            "eq": {
              "applyFun": {
                "applyFun": {
                  "applyFun": "history",
                  "arg": {
                    "str": "global"
                  }
                },
                "arg": "i"
              },
              "arg": {
                "str": "action"
              }
            },
            "arg": {
              "str": "BecomeLeader"
            }
          }
        }
      },
      "params": [
        
      ]
    },
    {
      "operator": "FirstCommit",
      "body": {
        "not": {
          "existsBounded": {
            "key": "i",
            "value": "Server"
          },
          "that": {
            "gt": {
              "applyFun": "commitIndex",
              "arg": "i"
            },
            "arg": 0
          }
        }
      },
      "params": [
        
      ]
    },
    {
      "operator": "LeadershipChange",
      "body": {
        "lt": {
          "applyFun": "history",
          "arg": {
            "str": "hadNumLeaders"
          }
        },
        "arg": 2
      },
      "params": [
        
      ]
    },
    {
      "operator": "MembershipChange",
      "body": {
        "lt": {
          "applyFun": "history",
          "arg": {
            "str": "hadNumMembershipChanges"
          }
        },
        "arg": 1
      },
      "params": [
        
      ]
    },
    {
      "operator": "MultipleMembershipChanges",
      "body": {
        "lt": {
          "applyFun": "history",
          "arg": {
            "str": "hadNumMembershipChanges"
          }
        },
        "arg": 2
      },
      "params": [
        
      ]
    },
    {
      "operator": "EntryCommitted",
      "body": {
        "not": {
          "existsBounded": {
            "key": "i",
            "value": {
              "domain": {
                "applyFun": "history",
                "arg": {
                  "str": "global"
                }
              }
            }
          },
          "that": {
            "and": [
              {
                "let": [
                  {
                    "operator": "x",
                    "body": {
                      "applyFun": {
                        "applyFun": "history",
                        "arg": {
                          "str": "global"
                        }
                      },
                      "arg": "i"
                    },
                    "params": [
                      
                    ]
                  }
                ],
                "body": {
                  "and": [
                    {
                      "eq": {
                        "applyFun": {
                          "applyOp": "x",
                          "args": [
                            
                          ]
                        },
                        "arg": {
                          "str": "action"
                        }
                      },
                      "arg": {
                        "str": "CommitEntry"
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      },
      "params": [
        
      ]
    },
    {
      "operator": "CommitWhenConcurrentLeaders",
      "body": {
        "not": {
          "existsBounded": {
            "key": "i",
            "value": {
              "domain": {
                "applyFun": "history",
                "arg": {
                  "str": "global"
                }
              }
            }
          },
          "that": {
            "existsBounded": {
              "key": "k",
              "value": {
                "domain": {
                  "applyFun": "history",
                  "arg": {
                    "str": "global"
                  }
                }
              }
            },
            "that": {
              "and": [
                {
                  "lt": "i",
                  "arg": "k"
                },
                {
                  "let": [
                    {
                      "operator": "x",
                      "body": {
                        "applyFun": {
                          "applyFun": "history",
                          "arg": {
                            "str": "global"
                          }
                        },
                        "arg": "i"
                      },
                      "params": [
                        
                      ]
                    },
                    {
                      "operator": "y",
                      "body": {
                        "applyFun": {
                          "applyFun": "history",
                          "arg": {
                            "str": "global"
                          }
                        },
                        "arg": "k"
                      },
                      "params": [
                        
                      ]
                    }
                  ],
                  "body": {
                    "and": [
                      {
                        "and": [
                          {
                            "eq": {
                              "applyFun": {
                                "applyOp": "x",
                                "args": [
                                  
                                ]
                              },
                              "arg": {
                                "str": "action"
                              }
                            },
                            "arg": {
                              "str": "BecomeLeader"
                            }
                          },
                          {
                            "ge": true,
                            "arg": 2
                          }
                        ]
                      },
                      {
                        "eq": {
                          "applyFun": {
                            "applyOp": "y",
                            "args": [
                              
                            ]
                          },
                          "arg": {
                            "str": "action"
                          }
                        },
                        "arg": {
                          "str": "CommitEntry"
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "params": [
        
      ]
    },
    {
      "operator": "MajorityOfClusterRestarts",
      "body": {
        "not": {
          "and": [
            {
              "existsBounded": {
                "key": "i",
                "value": "Server"
              },
              "that": {
                "existsBounded": {
                  "key": "j",
                  "value": "Server"
                },
                "that": {
                  "and": [
                    {
                      "ne": "i",
                      "arg": "j"
                    },
                    {
                      "ge": true,
                      "arg": 2
                    },
                    {
                      "ge": true,
                      "arg": 1
                    }
                  ]
                }
              }
            },
            {
              "existsBounded": {
                "key": "maj",
                "value": {
                  "applyOp": "Quorum",
                  "args": [
                    "Server"
                  ]
                }
              },
              "that": {
                "forallBounded": {
                  "key": "i",
                  "value": "maj"
                },
                "that": {
                  "ge": {
                    "applyFun": {
                      "applyFun": {
                        "applyFun": "history",
                        "arg": {
                          "str": "server"
                        }
                      },
                      "arg": "i"
                    },
                    "arg": {
                      "str": "restarted"
                    }
                  },
                  "arg": 1
                }
              }
            },
            {
              "forallBounded": {
                "key": "i",
                "value": {
                  "domain": {
                    "applyFun": "history",
                    "arg": {
                      "str": "global"
                    }
                  }
                }
              },
              "that": {
                "forallBounded": {
                  "key": "k",
                  "value": {
                    "domain": {
                      "applyFun": "history",
                      "arg": {
                        "str": "global"
                      }
                    }
                  }
                },
                "that": {
                  "implies": {
                    "and": [
                      {
                        "lt": "i",
                        "arg": "k"
                      },
                      {
                        "eq": {
                          "applyFun": {
                            "applyFun": {
                              "applyFun": "history",
                              "arg": {
                                "str": "global"
                              }
                            },
                            "arg": "i"
                          },
                          "arg": {
                            "str": "action"
                          }
                        },
                        "arg": {
                          "str": "Restart"
                        }
                      },
                      {
                        "eq": {
                          "applyFun": {
                            "applyFun": {
                              "applyFun": "history",
                              "arg": {
                                "str": "global"
                              }
                            },
                            "arg": "k"
                          },
                          "arg": {
                            "str": "action"
                          }
                        },
                        "arg": {
                          "str": "Restart"
                        }
                      }
                    ]
                  },
                  "arg": {
                    "ge": {
                      "minus": "i",
                      "arg": "k"
                    },
                    "arg": 2
                  }
                }
              }
            }
          ]
        }
      },
      "params": [
        
      ]
    },
    {
      "operator": "AddSucessful",
      "body": {
        "not": {
          "existsBounded": {
            "key": "i",
            "value": {
              "domain": {
                "applyFun": "history",
                "arg": {
                  "str": "global"
                }
              }
            }
          },
          "that": {
            "eq": {
              "applyFun": {
                "applyFun": {
                  "applyFun": "history",
                  "arg": {
                    "str": "global"
                  }
                },
                "arg": "i"
              },
              "arg": {
                "str": "action"
              }
            },
            "arg": {
              "str": "AddServer"
            }
          }
        }
      },
      "params": [
        
      ]
    },
    {
      "operator": "MembershipChangeCommits",
      "body": {
        "not": {
          "existsBounded": {
            "key": "i",
            "value": {
              "domain": {
                "applyFun": "history",
                "arg": {
                  "str": "global"
                }
              }
            }
          },
          "that": {
            "eq": {
              "applyFun": {
                "applyFun": {
                  "applyFun": "history",
                  "arg": {
                    "str": "global"
                  }
                },
                "arg": "i"
              },
              "arg": {
                "str": "action"
              }
            },
            "arg": {
              "str": "CommitMembershipChange"
            }
          }
        }
      },
      "params": [
        
      ]
    },
    {
      "operator": "MultipleMembershipChangesCommit",
      "body": {
        "not": {
          "existsBounded": {
            "key": "i",
            "value": {
              "domain": {
                "applyFun": "history",
                "arg": {
                  "str": "global"
                }
              }
            }
          },
          "that": {
            "existsBounded": {
              "key": "j",
              "value": {
                "domain": {
                  "applyFun": "history",
                  "arg": {
                    "str": "global"
                  }
                }
              }
            },
            "that": {
              "and": [
                {
                  "lt": "i",
                  "arg": "j"
                },
                {
                  "eq": {
                    "applyFun": {
                      "applyFun": {
                        "applyFun": "history",
                        "arg": {
                          "str": "global"
                        }
                      },
                      "arg": "i"
                    },
                    "arg": {
                      "str": "action"
                    }
                  },
                  "arg": {
                    "str": "CommitMembershipChange"
                  }
                },
                {
                  "eq": {
                    "applyFun": {
                      "applyFun": {
                        "applyFun": "history",
                        "arg": {
                          "str": "global"
                        }
                      },
                      "arg": "j"
                    },
                    "arg": {
                      "str": "action"
                    }
                  },
                  "arg": {
                    "str": "CommitMembershipChange"
                  }
                }
              ]
            }
          }
        }
      },
      "params": [
        
      ]
    },
    {
      "operator": "AddCommits",
      "body": {
        "not": {
          "existsBounded": {
            "key": "i",
            "value": {
              "domain": {
                "applyFun": "history",
                "arg": {
                  "str": "global"
                }
              }
            }
          },
          "that": {
            "existsBounded": {
              "key": "j",
              "value": {
                "domain": {
                  "applyFun": "history",
                  "arg": {
                    "str": "global"
                  }
                }
              }
            },
            "that": {
              "and": [
                {
                  "lt": "i",
                  "arg": "j"
                },
                {
                  "let": [
                    {
                      "operator": "x",
                      "body": {
                        "applyFun": {
                          "applyFun": "history",
                          "arg": {
                            "str": "global"
                          }
                        },
                        "arg": "i"
                      },
                      "params": [
                        
                      ]
                    },
                    {
                      "operator": "y",
                      "body": {
                        "applyFun": {
                          "applyFun": "history",
                          "arg": {
                            "str": "global"
                          }
                        },
                        "arg": "j"
                      },
                      "params": [
                        
                      ]
                    }
                  ],
                  "body": {
                    "and": [
                      {
                        "eq": {
                          "applyFun": {
                            "applyOp": "x",
                            "args": [
                              
                            ]
                          },
                          "arg": {
                            "str": "action"
                          }
                        },
                        "arg": {
                          "str": "AddServer"
                        }
                      },
                      {
                        "eq": {
                          "applyFun": {
                            "applyOp": "y",
                            "args": [
                              
                            ]
                          },
                          "arg": {
                            "str": "action"
                          }
                        },
                        "arg": {
                          "str": "CommitMembershipChange"
                        }
                      },
                      {
                        "in": {
                          "applyFun": {
                            "applyOp": "x",
                            "args": [
                              
                            ]
                          },
                          "arg": {
                            "str": "added"
                          }
                        },
                        "arg": {
                          "applyFun": {
                            "applyOp": "y",
                            "args": [
                              
                            ]
                          },
                          "arg": {
                            "str": "config"
                          }
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "params": [
        
      ]
    },
    {
      "operator": "NewlyJoinedBecomeLeader",
      "body": {
        "not": {
          "existsBounded": {
            "key": "i",
            "value": {
              "domain": {
                "applyFun": "history",
                "arg": {
                  "str": "global"
                }
              }
            }
          },
          "that": {
            "existsBounded": {
              "key": "j",
              "value": {
                "domain": {
                  "applyFun": "history",
                  "arg": {
                    "str": "global"
                  }
                }
              }
            },
            "that": {
              "and": [
                {
                  "lt": "i",
                  "arg": "j"
                },
                {
                  "let": [
                    {
                      "operator": "x",
                      "body": {
                        "applyFun": {
                          "applyFun": "history",
                          "arg": {
                            "str": "global"
                          }
                        },
                        "arg": "i"
                      },
                      "params": [
                        
                      ]
                    },
                    {
                      "operator": "y",
                      "body": {
                        "applyFun": {
                          "applyFun": "history",
                          "arg": {
                            "str": "global"
                          }
                        },
                        "arg": "j"
                      },
                      "params": [
                        
                      ]
                    }
                  ],
                  "body": {
                    "and": [
                      {
                        "eq": {
                          "applyFun": {
                            "applyOp": "x",
                            "args": [
                              
                            ]
                          },
                          "arg": {
                            "str": "action"
                          }
                        },
                        "arg": {
                          "str": "AddServer"
                        }
                      },
                      {
                        "eq": {
                          "applyFun": {
                            "applyOp": "y",
                            "args": [
                              
                            ]
                          },
                          "arg": {
                            "str": "action"
                          }
                        },
                        "arg": {
                          "str": "BecomeLeader"
                        }
                      },
                      {
                        "eq": {
                          "applyFun": {
                            "applyOp": "x",
                            "args": [
                              
                            ]
                          },
                          "arg": {
                            "str": "added"
                          }
                        },
                        "arg": {
                          "applyFun": {
                            "applyOp": "y",
                            "args": [
                              
                            ]
                          },
                          "arg": {
                            "str": "executedOn"
                          }
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "params": [
        
      ]
    },
    {
      "operator": "LeaderChangesDuringConfChange",
      "body": {
        "not": {
          "existsBounded": {
            "key": "i",
            "value": {
              "domain": {
                "applyFun": "history",
                "arg": {
                  "str": "global"
                }
              }
            }
          },
          "that": {
            "existsBounded": {
              "key": "k",
              "value": {
                "domain": {
                  "applyFun": "history",
                  "arg": {
                    "str": "global"
                  }
                }
              }
            },
            "that": {
              "and": [
                {
                  "lt": "i",
                  "arg": "k"
                },
                {
                  "let": [
                    {
                      "operator": "x",
                      "body": {
                        "applyFun": {
                          "applyFun": "history",
                          "arg": {
                            "str": "global"
                          }
                        },
                        "arg": "i"
                      },
                      "params": [
                        
                      ]
                    },
                    {
                      "operator": "y",
                      "body": {
                        "applyFun": {
                          "applyFun": "history",
                          "arg": {
                            "str": "global"
                          }
                        },
                        "arg": "k"
                      },
                      "params": [
                        
                      ]
                    }
                  ],
                  "body": {
                    "and": [
                      {
                        "eq": {
                          "applyFun": {
                            "applyOp": "x",
                            "args": [
                              
                            ]
                          },
                          "arg": {
                            "str": "action"
                          }
                        },
                        "arg": {
                          "str": "AddServer"
                        }
                      },
                      {
                        "eq": {
                          "applyFun": {
                            "applyOp": "y",
                            "args": [
                              
                            ]
                          },
                          "arg": {
                            "str": "action"
                          }
                        },
                        "arg": {
                          "str": "BecomeLeader"
                        }
                      }
                    ]
                  }
                },
                {
                  "not": {
                    "existsBounded": {
                      "key": "j",
                      "value": {
                        "dotdot": "i",
                        "arg": "k"
                      }
                    },
                    "that": {
                      "and": [
                        {
                          "eq": {
                            "applyFun": {
                              "applyFun": {
                                "applyFun": "history",
                                "arg": {
                                  "str": "global"
                                }
                              },
                              "arg": "j"
                            },
                            "arg": {
                              "str": "action"
                            }
                          },
                          "arg": {
                            "str": "CommitMembershipChange"
                          }
                        }
                      ]
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "params": [
        
      ]
    },
    {
      "operator": "perms",
      "body": true,
      "params": [
        
      ]
    },
    {
      "assume": {
        "and": [
          {
            "ne": "Leader",
            "arg": "Candidate"
          },
          {
            "ne": "Candidate",
            "arg": "Follower"
          },
          {
            "ne": "Follower",
            "arg": "Leader"
          }
        ]
      }
    },
    {
      "assume": {
        "and": [
          {
            "ne": "RequestVoteRequest",
            "arg": "AppendEntriesRequest"
          },
          {
            "ne": "RequestVoteRequest",
            "arg": "RequestVoteResponse"
          },
          {
            "ne": "RequestVoteRequest",
            "arg": "AppendEntriesResponse"
          },
          {
            "ne": "AppendEntriesRequest",
            "arg": "RequestVoteResponse"
          },
          {
            "ne": "AppendEntriesRequest",
            "arg": "AppendEntriesResponse"
          },
          {
            "ne": "RequestVoteResponse",
            "arg": "AppendEntriesResponse"
          }
        ]
      }
    },
    {
      "operator": "CopiesIn",
      "body": {
        "if": {
          "applyOp": "BagIn",
          "args": [
            "e",
            "B"
          ]
        },
        "then": {
          "applyFun": "B",
          "arg": "e"
        },
        "else": 0
      },
      "params": [
        {
          "name": "e",
          "arity": 0
        },
        {
          "name": "B",
          "arity": 0
        }
      ]
    },
    {
      "operator": "vars",
      "body": {
        "tuple": [
          "messages",
          {
            "applyOp": "serverVars",
            "args": [
              
            ]
          },
          {
            "applyOp": "candidateVars",
            "args": [
              
            ]
          },
          {
            "applyOp": "leaderVars",
            "args": [
              
            ]
          },
          {
            "applyOp": "logVars",
            "args": [
              
            ]
          }
        ]
      },
      "params": [
        
      ]
    },
    {
      "operator": "WrapMsg",
      "body": {
        "if": {
          "notin": {
            "str": "wrapped"
          },
          "arg": {
            "domain": "m"
          }
        },
        "then": {
          "if": {
            "eq": {
              "applyFun": "m",
              "arg": {
                "str": "mtype"
              }
            },
            "arg": "RequestVoteRequest"
          },
          "then": {
            "record": [
              {
                "key": {
                  "str": "wrapped"
                },
                "value": true
              },
              {
                "key": {
                  "str": "mtype"
                },
                "value": {
                  "applyFun": "m",
                  "arg": {
                    "str": "mtype"
                  }
                }
              },
              {
                "key": {
                  "str": "mterm"
                },
                "value": {
                  "applyFun": "m",
                  "arg": {
                    "str": "mterm"
                  }
                }
              },
              {
                "key": {
                  "str": "msource"
                },
                "value": {
                  "applyFun": "m",
                  "arg": {
                    "str": "msource"
                  }
                }
              },
              {
                "key": {
                  "str": "mdest"
                },
                "value": {
                  "applyFun": "m",
                  "arg": {
                    "str": "mdest"
                  }
                }
              },
              {
                "key": {
                  "str": "RVReq"
                },
                "value": "m"
              },
              {
                "key": {
                  "str": "RVResp"
                },
                "value": {
                  "applyOp": "EmptyRVRespMsg",
                  "args": [
                    
                  ]
                }
              },
              {
                "key": {
                  "str": "AEReq"
                },
                "value": {
                  "applyOp": "EmptyAEReqMsg",
                  "args": [
                    
                  ]
                }
              },
              {
                "key": {
                  "str": "AEResp"
                },
                "value": {
                  "applyOp": "EmptyAERespMsg",
                  "args": [
                    
                  ]
                }
              }
            ]
          },
          "else": {
            "if": {
              "eq": {
                "applyFun": "m",
                "arg": {
                  "str": "mtype"
                }
              },
              "arg": "RequestVoteResponse"
            },
            "then": {
              "record": [
                {
                  "key": {
                    "str": "wrapped"
                  },
                  "value": true
                },
                {
                  "key": {
                    "str": "mtype"
                  },
                  "value": {
                    "applyFun": "m",
                    "arg": {
                      "str": "mtype"
                    }
                  }
                },
                {
                  "key": {
                    "str": "mterm"
                  },
                  "value": {
                    "applyFun": "m",
                    "arg": {
                      "str": "mterm"
                    }
                  }
                },
                {
                  "key": {
                    "str": "msource"
                  },
                  "value": {
                    "applyFun": "m",
                    "arg": {
                      "str": "msource"
                    }
                  }
                },
                {
                  "key": {
                    "str": "mdest"
                  },
                  "value": {
                    "applyFun": "m",
                    "arg": {
                      "str": "mdest"
                    }
                  }
                },
                {
                  "key": {
                    "str": "RVReq"
                  },
                  "value": {
                    "applyOp": "EmptyRVReqMsg",
                    "args": [
                      
                    ]
                  }
                },
                {
                  "key": {
                    "str": "RVResp"
                  },
                  "value": "m"
                },
                {
                  "key": {
                    "str": "AEReq"
                  },
                  "value": {
                    "applyOp": "EmptyAEReqMsg",
                    "args": [
                      
                    ]
                  }
                },
                {
                  "key": {
                    "str": "AEResp"
                  },
                  "value": {
                    "applyOp": "EmptyAERespMsg",
                    "args": [
                      
                    ]
                  }
                }
              ]
            },
            "else": {
              "if": {
                "eq": {
                  "applyFun": "m",
                  "arg": {
                    "str": "mtype"
                  }
                },
                "arg": "AppendEntriesRequest"
              },
              "then": {
                "record": [
                  {
                    "key": {
                      "str": "wrapped"
                    },
                    "value": true
                  },
                  {
                    "key": {
                      "str": "mtype"
                    },
                    "value": {
                      "applyFun": "m",
                      "arg": {
                        "str": "mtype"
                      }
                    }
                  },
                  {
                    "key": {
                      "str": "mterm"
                    },
                    "value": {
                      "applyFun": "m",
                      "arg": {
                        "str": "mterm"
                      }
                    }
                  },
                  {
                    "key": {
                      "str": "msource"
                    },
                    "value": {
                      "applyFun": "m",
                      "arg": {
                        "str": "msource"
                      }
                    }
                  },
                  {
                    "key": {
                      "str": "mdest"
                    },
                    "value": {
                      "applyFun": "m",
                      "arg": {
                        "str": "mdest"
                      }
                    }
                  },
                  {
                    "key": {
                      "str": "RVReq"
                    },
                    "value": {
                      "applyOp": "EmptyRVReqMsg",
                      "args": [
                        
                      ]
                    }
                  },
                  {
                    "key": {
                      "str": "RVResp"
                    },
                    "value": {
                      "applyOp": "EmptyRVRespMsg",
                      "args": [
                        
                      ]
                    }
                  },
                  {
                    "key": {
                      "str": "AEReq"
                    },
                    "value": "m"
                  },
                  {
                    "key": {
                      "str": "AEResp"
                    },
                    "value": {
                      "applyOp": "EmptyAERespMsg",
                      "args": [
                        
                      ]
                    }
                  }
                ]
              },
              "else": {
                "record": [
                  {
                    "key": {
                      "str": "wrapped"
                    },
                    "value": true
                  },
                  {
                    "key": {
                      "str": "mtype"
                    },
                    "value": {
                      "applyFun": "m",
                      "arg": {
                        "str": "mtype"
                      }
                    }
                  },
                  {
                    "key": {
                      "str": "mterm"
                    },
                    "value": {
                      "applyFun": "m",
                      "arg": {
                        "str": "mterm"
                      }
                    }
                  },
                  {
                    "key": {
                      "str": "msource"
                    },
                    "value": {
                      "applyFun": "m",
                      "arg": {
                        "str": "msource"
                      }
                    }
                  },
                  {
                    "key": {
                      "str": "mdest"
                    },
                    "value": {
                      "applyFun": "m",
                      "arg": {
                        "str": "mdest"
                      }
                    }
                  },
                  {
                    "key": {
                      "str": "RVReq"
                    },
                    "value": {
                      "applyOp": "EmptyRVReqMsg",
                      "args": [
                        
                      ]
                    }
                  },
                  {
                    "key": {
                      "str": "RVResp"
                    },
                    "value": {
                      "applyOp": "EmptyRVRespMsg",
                      "args": [
                        
                      ]
                    }
                  },
                  {
                    "key": {
                      "str": "AEReq"
                    },
                    "value": {
                      "applyOp": "EmptyAEReqMsg",
                      "args": [
                        
                      ]
                    }
                  },
                  {
                    "key": {
                      "str": "AEResp"
                    },
                    "value": "m"
                  }
                ]
              }
            }
          }
        },
        "else": "m"
      },
      "params": [
        {
          "name": "m",
          "arity": 0
        }
      ]
    },
    {
      "operator": "SendDirect",
      "body": {
        "let": [
          {
            "operator": "msgAction",
            "body": {
              "record": [
                {
                  "key": {
                    "str": "action"
                  },
                  "value": {
                    "str": "Send"
                  }
                },
                {
                  "key": {
                    "str": "executedOn"
                  },
                  "value": {
                    "applyFun": "m",
                    "arg": {
                      "str": "msource"
                    }
                  }
                },
                {
                  "key": {
                    "str": "msg"
                  },
                  "value": "m"
                }
              ]
            },
            "params": [
              
            ]
          },
          {
            "operator": "membershipAction",
            "body": {
              "if": {
                "eq": {
                  "applyFun": "m",
                  "arg": {
                    "str": "mtype"
                  }
                },
                "arg": "CatchupRequest"
              },
              "then": {
                "record": [
                  {
                    "key": {
                      "str": "action"
                    },
                    "value": {
                      "str": "TryAddServer"
                    }
                  },
                  {
                    "key": {
                      "str": "executedOn"
                    },
                    "value": {
                      "applyFun": "m",
                      "arg": {
                        "str": "msource"
                      }
                    }
                  },
                  {
                    "key": {
                      "str": "added"
                    },
                    "value": {
                      "applyFun": "m",
                      "arg": {
                        "str": "mdest"
                      }
                    }
                  }
                ]
              },
              "else": {
                "if": {
                  "eq": {
                    "applyFun": "m",
                    "arg": {
                      "str": "mtype"
                    }
                  },
                  "arg": "CheckOldConfig"
                },
                "then": {
                  "record": [
                    {
                      "key": {
                        "str": "action"
                      },
                      "value": {
                        "str": "TryRemoveServer"
                      }
                    },
                    {
                      "key": {
                        "str": "executedOn"
                      },
                      "value": {
                        "applyFun": "m",
                        "arg": {
                          "str": "msource"
                        }
                      }
                    },
                    {
                      "key": {
                        "str": "removed"
                      },
                      "value": {
                        "applyFun": "m",
                        "arg": {
                          "str": "mserver"
                        }
                      }
                    }
                  ]
                },
                "else": {
                  "tuple": [
                    
                  ]
                }
              }
            },
            "params": [
              
            ]
          }
        ],
        "body": {
          "and": [
            {
              "eq": {
                "prime": "messages"
              },
              "arg": {
                "applyOp": "WithMessage",
                "args": [
                  "m",
                  "messages"
                ]
              }
            },
            {
              "eq": {
                "prime": "history"
              },
              "arg": {
                "if": {
                  "eq": {
                    "applyOp": "membershipAction",
                    "args": [
                      
                    ]
                  },
                  "arg": {
                    "tuple": [
                      
                    ]
                  }
                },
                "then": {
                  "except": "history",
                  "where": [
                    {
                      "key": {
                        "tuple": [
                          {
                            "str": "global"
                          }
                        ]
                      },
                      "value": true
                    }
                  ]
                },
                "else": {
                  "except": "history",
                  "where": [
                    {
                      "key": {
                        "tuple": [
                          {
                            "str": "hadNumTriedMembershipChanges"
                          }
                        ]
                      },
                      "value": {
                        "plus": {
                          "applyFun": "history",
                          "arg": {
                            "str": "hadNumTriedMembershipChanges"
                          }
                        },
                        "arg": 1
                      }
                    },
                    {
                      "key": {
                        "tuple": [
                          {
                            "str": "global"
                          }
                        ]
                      },
                      "value": true
                    }
                  ]
                }
              }
            }
          ]
        }
      },
      "params": [
        {
          "name": "m",
          "arity": 0
        }
      ]
    },
    {
      "operator": "SendWithoutHistoryDirect",
      "body": {
        "eq": {
          "prime": "messages"
        },
        "arg": {
          "applyOp": "WithMessage",
          "args": [
            "m",
            "messages"
          ]
        }
      },
      "params": [
        {
          "name": "m",
          "arity": 0
        }
      ]
    },
    {
      "operator": "DiscardDirect",
      "body": {
        "let": [
          {
            "operator": "action",
            "body": {
              "record": [
                {
                  "key": {
                    "str": "action"
                  },
                  "value": {
                    "str": "Receive"
                  }
                },
                {
                  "key": {
                    "str": "executedOn"
                  },
                  "value": {
                    "applyFun": "m",
                    "arg": {
                      "str": "mdest"
                    }
                  }
                },
                {
                  "key": {
                    "str": "msg"
                  },
                  "value": "m"
                }
              ]
            },
            "params": [
              
            ]
          }
        ],
        "body": {
          "and": [
            {
              "eq": {
                "prime": "messages"
              },
              "arg": {
                "applyOp": "WithoutMessage",
                "args": [
                  "m",
                  "messages"
                ]
              }
            },
            {
              "eq": {
                "prime": "history"
              },
              "arg": {
                "except": "history",
                "where": [
                  {
                    "key": {
                      "tuple": [
                        {
                          "str": "global"
                        }
                      ]
                    },
                    "value": true
                  }
                ]
              }
            }
          ]
        }
      },
      "params": [
        {
          "name": "m",
          "arity": 0
        }
      ]
    },
    {
      "operator": "DiscardDirectWithMembershipChange",
      "body": {
        "let": [
          {
            "operator": "action",
            "body": {
              "record": [
                {
                  "key": {
                    "str": "action"
                  },
                  "value": {
                    "str": "Receive"
                  }
                },
                {
                  "key": {
                    "str": "executedOn"
                  },
                  "value": {
                    "applyFun": "m",
                    "arg": {
                      "str": "mdest"
                    }
                  }
                },
                {
                  "key": {
                    "str": "msg"
                  },
                  "value": "m"
                }
              ]
            },
            "params": [
              
            ]
          }
        ],
        "body": {
          "and": [
            {
              "eq": {
                "prime": "messages"
              },
              "arg": {
                "applyOp": "WithoutMessage",
                "args": [
                  "m",
                  "messages"
                ]
              }
            },
            {
              "eq": {
                "prime": "history"
              },
              "arg": {
                "except": "history",
                "where": [
                  {
                    "key": {
                      "tuple": [
                        {
                          "str": "hadNumMembershipChanges"
                        }
                      ]
                    },
                    "value": {
                      "plus": {
                        "applyFun": "history",
                        "arg": {
                          "str": "hadNumMembershipChanges"
                        }
                      },
                      "arg": 1
                    }
                  },
                  {
                    "key": {
                      "tuple": [
                        {
                          "str": "global"
                        }
                      ]
                    },
                    "value": true
                  }
                ]
              }
            }
          ]
        }
      },
      "params": [
        {
          "name": "m",
          "arity": 0
        },
        {
          "name": "extraAction",
          "arity": 0
        }
      ]
    },
    {
      "operator": "DiscardWithoutHistoryDirect",
      "body": {
        "eq": {
          "prime": "messages"
        },
        "arg": {
          "applyOp": "WithoutMessage",
          "args": [
            "m",
            "messages"
          ]
        }
      },
      "params": [
        {
          "name": "m",
          "arity": 0
        }
      ]
    },
    {
      "operator": "ReplyDirect",
      "body": {
        "let": [
          {
            "operator": "req",
            "body": "request",
            "params": [
              
            ]
          }
        ],
        "body": {
          "let": [
            {
              "operator": "resp",
              "body": "response",
              "params": [
                
              ]
            }
          ],
          "body": {
            "let": [
              {
                "operator": "recvA",
                "body": {
                  "record": [
                    {
                      "key": {
                        "str": "action"
                      },
                      "value": {
                        "str": "Receive"
                      }
                    },
                    {
                      "key": {
                        "str": "executedOn"
                      },
                      "value": {
                        "applyFun": "request",
                        "arg": {
                          "str": "mdest"
                        }
                      }
                    },
                    {
                      "key": {
                        "str": "msg"
                      },
                      "value": {
                        "applyOp": "req",
                        "args": [
                          
                        ]
                      }
                    }
                  ]
                },
                "params": [
                  
                ]
              }
            ],
            "body": {
              "let": [
                {
                  "operator": "respA",
                  "body": {
                    "record": [
                      {
                        "key": {
                          "str": "action"
                        },
                        "value": {
                          "str": "Send"
                        }
                      },
                      {
                        "key": {
                          "str": "executedOn"
                        },
                        "value": {
                          "applyFun": "response",
                          "arg": {
                            "str": "msource"
                          }
                        }
                      },
                      {
                        "key": {
                          "str": "msg"
                        },
                        "value": {
                          "applyOp": "resp",
                          "args": [
                            
                          ]
                        }
                      }
                    ]
                  },
                  "params": [
                    
                  ]
                }
              ],
              "body": {
                "and": [
                  {
                    "eq": {
                      "prime": "messages"
                    },
                    "arg": {
                      "applyOp": "WithoutMessage",
                      "args": [
                        {
                          "applyOp": "req",
                          "args": [
                            
                          ]
                        },
                        {
                          "applyOp": "WithMessage",
                          "args": [
                            {
                              "applyOp": "resp",
                              "args": [
                                
                              ]
                            },
                            "messages"
                          ]
                        }
                      ]
                    }
                  },
                  {
                    "eq": {
                      "prime": "history"
                    },
                    "arg": {
                      "except": "history",
                      "where": [
                        {
                          "key": {
                            "tuple": [
                              {
                                "str": "global"
                              }
                            ]
                          },
                          "value": true
                        }
                      ]
                    }
                  }
                ]
              }
            }
          }
        }
      },
      "params": [
        {
          "name": "response",
          "arity": 0
        },
        {
          "name": "request",
          "arity": 0
        }
      ]
    },
    {
      "operator": "GetMaxConfigIndex",
      "body": {
        "applyOp": "GetHistoricalMaxConfigIndex",
        "args": [
          "i",
          {
            "applyOp": "systemState",
            "args": [
              
            ]
          }
        ]
      },
      "params": [
        {
          "name": "i",
          "arity": 0
        }
      ]
    },
    {
      "operator": "GetHistoricalConfig",
      "body": {
        "let": [
          {
            "operator": "maxConfigIndex",
            "body": {
              "applyOp": "GetHistoricalMaxConfigIndex",
              "args": [
                "i",
                "s"
              ]
            },
            "params": [
              
            ]
          }
        ],
        "body": {
          "if": {
            "eq": {
              "applyOp": "maxConfigIndex",
              "args": [
                
              ]
            },
            "arg": 0
          },
          "then": "InitServer",
          "else": {
            "applyFun": {
              "applyFun": {
                "applyFun": {
                  "applyFun": "s",
                  "arg": {
                    "str": "log"
                  }
                },
                "arg": "i"
              },
              "arg": {
                "applyOp": "maxConfigIndex",
                "args": [
                  
                ]
              }
            },
            "arg": {
              "str": "value"
            }
          }
        }
      },
      "params": [
        {
          "name": "i",
          "arity": 0
        },
        {
          "name": "s",
          "arity": 0
        }
      ]
    },
    {
      "operator": "Init",
      "body": {
        "and": [
          {
            "eq": "messages",
            "arg": {
              "applyOp": "EmptyBag",
              "args": [
                
              ]
            }
          },
          {
            "eq": "history",
            "arg": {
              "applyOp": "InitHistory",
              "args": [
                
              ]
            }
          },
          {
            "applyOp": "InitServerVars",
            "args": [
              
            ]
          },
          {
            "applyOp": "InitCandidateVars",
            "args": [
              
            ]
          },
          {
            "applyOp": "InitLeaderVars",
            "args": [
              
            ]
          },
          {
            "applyOp": "InitLogVars",
            "args": [
              
            ]
          }
        ]
      },
      "params": [
        
      ]
    },
    {
      "operator": "BecomeLeader",
      "body": {
        "and": [
          {
            "eq": {
              "applyFun": "state",
              "arg": "i"
            },
            "arg": "Candidate"
          },
          {
            "in": {
              "applyFun": "votesGranted",
              "arg": "i"
            },
            "arg": {
              "applyOp": "Quorum",
              "args": [
                {
                  "applyOp": "GetConfig",
                  "args": [
                    "i"
                  ]
                }
              ]
            }
          },
          {
            "eq": {
              "prime": "state"
            },
            "arg": {
              "except": "state",
              "where": [
                {
                  "key": {
                    "tuple": [
                      "i"
                    ]
                  },
                  "value": "Leader"
                }
              ]
            }
          },
          {
            "eq": {
              "prime": "nextIndex"
            },
            "arg": {
              "except": "nextIndex",
              "where": [
                {
                  "key": {
                    "tuple": [
                      "i"
                    ]
                  },
                  "value": {
                    "funDef": {
                      "plus": true,
                      "arg": 1
                    },
                    "where": [
                      {
                        "key": "j",
                        "value": "Server"
                      }
                    ]
                  }
                }
              ]
            }
          },
          {
            "eq": {
              "prime": "matchIndex"
            },
            "arg": {
              "except": "matchIndex",
              "where": [
                {
                  "key": {
                    "tuple": [
                      "i"
                    ]
                  },
                  "value": {
                    "funDef": 0,
                    "where": [
                      {
                        "key": "j",
                        "value": "Server"
                      }
                    ]
                  }
                }
              ]
            }
          },
          {
            "eq": {
              "prime": "history"
            },
            "arg": {
              "except": "history",
              "where": [
                {
                  "key": {
                    "tuple": [
                      {
                        "str": "hadNumLeaders"
                      }
                    ]
                  },
                  "value": {
                    "plus": {
                      "applyFun": "history",
                      "arg": {
                        "str": "hadNumLeaders"
                      }
                    },
                    "arg": 1
                  }
                },
                {
                  "key": {
                    "tuple": [
                      {
                        "str": "global"
                      }
                    ]
                  },
                  "value": true
                }
              ]
            }
          },
          {
            "unchanged": {
              "tuple": [
                "messages",
                "currentTerm",
                "votedFor",
                {
                  "applyOp": "candidateVars",
                  "args": [
                    
                  ]
                },
                {
                  "applyOp": "logVars",
                  "args": [
                    
                  ]
                }
              ]
            }
          }
        ]
      },
      "params": [
        {
          "name": "i",
          "arity": 0
        }
      ]
    },
    {
      "operator": "ClientRequest",
      "body": {
        "and": [
          {
            "eq": {
              "applyFun": "state",
              "arg": "i"
            },
            "arg": "Leader"
          },
          {
            "let": [
              {
                "operator": "entry",
                "body": {
                  "record": [
                    {
                      "key": {
                        "str": "term"
                      },
                      "value": {
                        "applyFun": "currentTerm",
                        "arg": "i"
                      }
                    },
                    {
                      "key": {
                        "str": "type"
                      },
                      "value": "ValueEntry"
                    },
                    {
                      "key": {
                        "str": "value"
                      },
                      "value": "v"
                    }
                  ]
                },
                "params": [
                  
                ]
              },
              {
                "operator": "newLog",
                "body": true,
                "params": [
                  
                ]
              }
            ],
            "body": {
              "eq": {
                "prime": "log"
              },
              "arg": {
                "except": "log",
                "where": [
                  {
                    "key": {
                      "tuple": [
                        "i"
                      ]
                    },
                    "value": {
                      "applyOp": "newLog",
                      "args": [
                        
                      ]
                    }
                  }
                ]
              }
            }
          },
          {
            "eq": {
              "prime": "history"
            },
            "arg": {
              "except": "history",
              "where": [
                {
                  "key": {
                    "tuple": [
                      {
                        "str": "hadNumClientRequests"
                      }
                    ]
                  },
                  "value": {
                    "plus": {
                      "applyFun": "history",
                      "arg": {
                        "str": "hadNumClientRequests"
                      }
                    },
                    "arg": 1
                  }
                }
              ]
            }
          },
          {
            "unchanged": {
              "tuple": [
                "messages",
                {
                  "applyOp": "serverVars",
                  "args": [
                    
                  ]
                },
                {
                  "applyOp": "candidateVars",
                  "args": [
                    
                  ]
                },
                {
                  "applyOp": "leaderVars",
                  "args": [
                    
                  ]
                },
                "commitIndex"
              ]
            }
          }
        ]
      },
      "params": [
        {
          "name": "i",
          "arity": 0
        },
        {
          "name": "v",
          "arity": 0
        }
      ]
    },
    {
      "operator": "ReturnToFollowerState",
      "body": {
        "and": [
          {
            "eq": {
              "applyFun": "m",
              "arg": {
                "str": "mterm"
              }
            },
            "arg": {
              "applyFun": "currentTerm",
              "arg": "i"
            }
          },
          {
            "eq": {
              "applyFun": "state",
              "arg": "i"
            },
            "arg": "Candidate"
          },
          {
            "eq": {
              "prime": "state"
            },
            "arg": {
              "except": "state",
              "where": [
                {
                  "key": {
                    "tuple": [
                      "i"
                    ]
                  },
                  "value": "Follower"
                }
              ]
            }
          },
          {
            "unchanged": {
              "tuple": [
                "currentTerm",
                "votedFor",
                {
                  "applyOp": "logVars",
                  "args": [
                    
                  ]
                },
                "messages",
                "history"
              ]
            }
          }
        ]
      },
      "params": [
        {
          "name": "i",
          "arity": 0
        },
        {
          "name": "m",
          "arity": 0
        }
      ]
    },
    {
      "operator": "ConflictAppendEntriesRequest",
      "body": {
        "and": [
          {
            "ne": {
              "applyFun": "m",
              "arg": {
                "str": "mentries"
              }
            },
            "arg": {
              "tuple": [
                
              ]
            }
          },
          {
            "ge": true,
            "arg": "index"
          },
          {
            "ne": {
              "applyFun": {
                "applyFun": {
                  "applyFun": "log",
                  "arg": "i"
                },
                "arg": "index"
              },
              "arg": {
                "str": "term"
              }
            },
            "arg": {
              "applyFun": {
                "applyFun": {
                  "applyFun": "m",
                  "arg": {
                    "str": "mentries"
                  }
                },
                "arg": 1
              },
              "arg": {
                "str": "term"
              }
            }
          },
          {
            "let": [
              {
                "operator": "new",
                "body": true,
                "params": [
                  
                ]
              }
            ],
            "body": {
              "eq": {
                "prime": "log"
              },
              "arg": {
                "except": "log",
                "where": [
                  {
                    "key": {
                      "tuple": [
                        "i"
                      ]
                    },
                    "value": {
                      "applyOp": "new",
                      "args": [
                        
                      ]
                    }
                  }
                ]
              }
            }
          },
          {
            "unchanged": {
              "tuple": [
                {
                  "applyOp": "serverVars",
                  "args": [
                    
                  ]
                },
                "commitIndex",
                "messages",
                "history"
              ]
            }
          }
        ]
      },
      "params": [
        {
          "name": "i",
          "arity": 0
        },
        {
          "name": "index",
          "arity": 0
        },
        {
          "name": "m",
          "arity": 0
        }
      ]
    },
    {
      "operator": "NoConflictAppendEntriesRequest",
      "body": {
        "and": [
          {
            "ne": {
              "applyFun": "m",
              "arg": {
                "str": "mentries"
              }
            },
            "arg": {
              "tuple": [
                
              ]
            }
          },
          {
            "eq": true,
            "arg": {
              "applyFun": "m",
              "arg": {
                "str": "mprevLogIndex"
              }
            }
          },
          {
            "eq": {
              "prime": "log"
            },
            "arg": {
              "except": "log",
              "where": [
                {
                  "key": {
                    "tuple": [
                      "i"
                    ]
                  },
                  "value": true
                }
              ]
            }
          },
          {
            "unchanged": {
              "tuple": [
                {
                  "applyOp": "serverVars",
                  "args": [
                    
                  ]
                },
                "commitIndex",
                "messages",
                "history"
              ]
            }
          }
        ]
      },
      "params": [
        {
          "name": "i",
          "arity": 0
        },
        {
          "name": "m",
          "arity": 0
        }
      ]
    },
    {
      "operator": "UpdateTerm",
      "body": {
        "and": [
          {
            "gt": {
              "applyFun": "m",
              "arg": {
                "str": "mterm"
              }
            },
            "arg": {
              "applyFun": "currentTerm",
              "arg": "i"
            }
          },
          {
            "eq": {
              "prime": "currentTerm"
            },
            "arg": {
              "except": "currentTerm",
              "where": [
                {
                  "key": {
                    "tuple": [
                      "i"
                    ]
                  },
                  "value": {
                    "applyFun": "m",
                    "arg": {
                      "str": "mterm"
                    }
                  }
                }
              ]
            }
          },
          {
            "eq": {
              "prime": "state"
            },
            "arg": {
              "except": "state",
              "where": [
                {
                  "key": {
                    "tuple": [
                      "i"
                    ]
                  },
                  "value": "Follower"
                }
              ]
            }
          },
          {
            "eq": {
              "prime": "votedFor"
            },
            "arg": {
              "except": "votedFor",
              "where": [
                {
                  "key": {
                    "tuple": [
                      "i"
                    ]
                  },
                  "value": "Nil"
                }
              ]
            }
          },
          {
            "unchanged": {
              "tuple": [
                "messages",
                {
                  "applyOp": "candidateVars",
                  "args": [
                    
                  ]
                },
                {
                  "applyOp": "leaderVars",
                  "args": [
                    
                  ]
                },
                {
                  "applyOp": "logVars",
                  "args": [
                    
                  ]
                },
                "history"
              ]
            }
          }
        ]
      },
      "params": [
        {
          "name": "i",
          "arity": 0
        },
        {
          "name": "j",
          "arity": 0
        },
        {
          "name": "m",
          "arity": 0
        }
      ]
    },
    {
      "operator": "NextCrash",
      "body": {
        "existsBounded": {
          "key": "i",
          "value": "Server"
        },
        "that": {
          "applyOp": "Restart",
          "args": [
            "i"
          ]
        }
      },
      "params": [
        
      ]
    },
    {
      "operator": "ElectionSafety",
      "body": {
        "forallBounded": {
          "key": "i",
          "value": "Server"
        },
        "that": {
          "implies": {
            "eq": {
              "applyFun": "state",
              "arg": "i"
            },
            "arg": "Leader"
          },
          "arg": {
            "forallBounded": {
              "key": "j",
              "value": "Server"
            },
            "that": {
              "ge": {
                "applyOp": "MaxOrZero",
                "args": [
                  {
                    "filter": {
                      "key": "n",
                      "value": {
                        "domain": {
                          "applyFun": "log",
                          "arg": "i"
                        }
                      }
                    },
                    "that": {
                      "eq": {
                        "applyFun": {
                          "applyFun": {
                            "applyFun": "log",
                            "arg": "i"
                          },
                          "arg": "n"
                        },
                        "arg": {
                          "str": "term"
                        }
                      },
                      "arg": {
                        "applyFun": "currentTerm",
                        "arg": "i"
                      }
                    }
                  }
                ]
              },
              "arg": {
                "applyOp": "MaxOrZero",
                "args": [
                  {
                    "filter": {
                      "key": "n",
                      "value": {
                        "domain": {
                          "applyFun": "log",
                          "arg": "j"
                        }
                      }
                    },
                    "that": {
                      "eq": {
                        "applyFun": {
                          "applyFun": {
                            "applyFun": "log",
                            "arg": "j"
                          },
                          "arg": "n"
                        },
                        "arg": {
                          "str": "term"
                        }
                      },
                      "arg": {
                        "applyFun": "currentTerm",
                        "arg": "i"
                      }
                    }
                  }
                ]
              }
            }
          }
        }
      },
      "params": [
        
      ]
    },
    {
      "operator": "BoundedInFlightMessages",
      "body": {
        "le": {
          "applyOp": "BagCardinality",
          "args": [
            "messages"
          ]
        },
        "arg": {
          "applyOp": "MaxInFlightMessages",
          "args": [
            
          ]
        }
      },
      "params": [
        
      ]
    },
    {
      "operator": "BoundedTerms",
      "body": {
        "forallBounded": {
          "key": "i",
          "value": "Server"
        },
        "that": {
          "le": {
            "applyFun": "currentTerm",
            "arg": "i"
          },
          "arg": {
            "applyOp": "MaxTerms",
            "args": [
              
            ]
          }
        }
      },
      "params": [
        
      ]
    },
    {
      "operator": "BoundedTriedMembershipChanges",
      "body": {
        "le": {
          "applyFun": "history",
          "arg": {
            "str": "hadNumTriedMembershipChanges"
          }
        },
        "arg": {
          "applyOp": "MaxTriedMembershipChanges",
          "args": [
            
          ]
        }
      },
      "params": [
        
      ]
    },
    {
      "operator": "CleanStartUntilFirstRequest",
      "body": {
        "implies": {
          "and": [
            {
              "lt": {
                "applyFun": "history",
                "arg": {
                  "str": "hadNumLeaders"
                }
              },
              "arg": 1
            },
            {
              "lt": {
                "applyFun": "history",
                "arg": {
                  "str": "hadNumClientRequests"
                }
              },
              "arg": 1
            }
          ]
        },
        "arg": {
          "and": [
            {
              "forallBounded": {
                "key": "i",
                "value": "Server"
              },
              "that": {
                "eq": {
                  "applyFun": {
                    "applyFun": {
                      "applyFun": "history",
                      "arg": {
                        "str": "server"
                      }
                    },
                    "arg": "i"
                  },
                  "arg": {
                    "str": "restarted"
                  }
                },
                "arg": 0
              }
            },
            {
              "le": {
                "applyOp": "Sum",
                "args": [
                  {
                    "funDef": {
                      "applyFun": {
                        "applyFun": {
                          "applyFun": "history",
                          "arg": {
                            "str": "server"
                          }
                        },
                        "arg": "i"
                      },
                      "arg": {
                        "str": "timeout"
                      }
                    },
                    "where": [
                      {
                        "key": "i",
                        "value": "Server"
                      }
                    ]
                  }
                ]
              },
              "arg": 1
            },
            {
              "applyOp": "ElectionsUncontested",
              "args": [
                
              ]
            }
          ]
        }
      },
      "params": [
        
      ]
    },
    {
      "operator": "ConcurrentLeaders",
      "body": {
        "not": {
          "ge": true,
          "arg": 2
        }
      },
      "params": [
        
      ]
    },
    {
      "operator": "SendWrapped",
      "body": {
        "let": [
          {
            "operator": "w",
            "body": {
              "applyOp": "WrapMsg",
              "args": [
                "m"
              ]
            },
            "params": [
              
            ]
          }
        ],
        "body": {
          "applyOp": "SendDirect",
          "args": [
            {
              "applyOp": "w",
              "args": [
                
              ]
            }
          ]
        }
      },
      "params": [
        {
          "name": "m",
          "arity": 0
        }
      ]
    },
    {
      "operator": "SendWithoutHistoryWrapped",
      "body": {
        "let": [
          {
            "operator": "w",
            "body": {
              "applyOp": "WrapMsg",
              "args": [
                "m"
              ]
            },
            "params": [
              
            ]
          }
        ],
        "body": {
          "applyOp": "SendWithoutHistoryDirect",
          "args": [
            {
              "applyOp": "w",
              "args": [
                
              ]
            }
          ]
        }
      },
      "params": [
        {
          "name": "m",
          "arity": 0
        }
      ]
    },
    {
      "operator": "DiscardWrapped",
      "body": {
        "let": [
          {
            "operator": "w",
            "body": {
              "applyOp": "WrapMsg",
              "args": [
                "m"
              ]
            },
            "params": [
              
            ]
          }
        ],
        "body": {
          "applyOp": "DiscardDirect",
          "args": [
            {
              "applyOp": "w",
              "args": [
                
              ]
            }
          ]
        }
      },
      "params": [
        {
          "name": "m",
          "arity": 0
        }
      ]
    },
    {
      "operator": "DiscardWithoutHistoryWrapped",
      "body": {
        "let": [
          {
            "operator": "w",
            "body": {
              "applyOp": "WrapMsg",
              "args": [
                "m"
              ]
            },
            "params": [
              
            ]
          }
        ],
        "body": {
          "applyOp": "DiscardWithoutHistoryDirect",
          "args": [
            {
              "applyOp": "w",
              "args": [
                
              ]
            }
          ]
        }
      },
      "params": [
        {
          "name": "m",
          "arity": 0
        }
      ]
    },
    {
      "operator": "ReplyWrapped",
      "body": {
        "let": [
          {
            "operator": "wresp",
            "body": {
              "applyOp": "WrapMsg",
              "args": [
                "response"
              ]
            },
            "params": [
              
            ]
          }
        ],
        "body": {
          "let": [
            {
              "operator": "wreq",
              "body": {
                "applyOp": "WrapMsg",
                "args": [
                  "request"
                ]
              },
              "params": [
                
              ]
            }
          ],
          "body": {
            "applyOp": "ReplyDirect",
            "args": [
              {
                "applyOp": "wresp",
                "args": [
                  
                ]
              },
              {
                "applyOp": "wreq",
                "args": [
                  
                ]
              }
            ]
          }
        }
      },
      "params": [
        {
          "name": "response",
          "arity": 0
        },
        {
          "name": "request",
          "arity": 0
        }
      ]
    },
    {
      "operator": "Send",
      "body": {
        "applyOp": "SendDirect",
        "args": [
          "m"
        ]
      },
      "params": [
        {
          "name": "m",
          "arity": 0
        }
      ]
    },
    {
      "operator": "Reply",
      "body": {
        "applyOp": "ReplyDirect",
        "args": [
          "response",
          "request"
        ]
      },
      "params": [
        {
          "name": "response",
          "arity": 0
        },
        {
          "name": "request",
          "arity": 0
        }
      ]
    },
    {
      "operator": "Discard",
      "body": {
        "applyOp": "DiscardDirect",
        "args": [
          "m"
        ]
      },
      "params": [
        {
          "name": "m",
          "arity": 0
        }
      ]
    },
    {
      "operator": "DiscardWithMembershipChange",
      "body": {
        "applyOp": "DiscardDirectWithMembershipChange",
        "args": [
          "m",
          "extraAction"
        ]
      },
      "params": [
        {
          "name": "m",
          "arity": 0
        },
        {
          "name": "extraAction",
          "arity": 0
        }
      ]
    },
    {
      "operator": "SendWithoutHistory",
      "body": {
        "applyOp": "SendWithoutHistoryDirect",
        "args": [
          "m"
        ]
      },
      "params": [
        {
          "name": "m",
          "arity": 0
        }
      ]
    },
    {
      "operator": "DiscardWithoutHistory",
      "body": {
        "applyOp": "DiscardWithoutHistoryDirect",
        "args": [
          "m"
        ]
      },
      "params": [
        {
          "name": "m",
          "arity": 0
        }
      ]
    },
    {
      "operator": "GetConfig",
      "body": {
        "applyOp": "GetHistoricalConfig",
        "args": [
          "i",
          {
            "applyOp": "systemState",
            "args": [
              
            ]
          }
        ]
      },
      "params": [
        {
          "name": "i",
          "arity": 0
        }
      ]
    },
    {
      "operator": "Timeout",
      "body": {
        "and": [
          {
            "in": {
              "applyFun": "state",
              "arg": "i"
            },
            "arg": {
              "enumSet": [
                "Follower",
                "Candidate"
              ]
            }
          },
          {
            "in": "i",
            "arg": {
              "applyOp": "GetConfig",
              "args": [
                "i"
              ]
            }
          },
          {
            "eq": {
              "prime": "state"
            },
            "arg": {
              "except": "state",
              "where": [
                {
                  "key": {
                    "tuple": [
                      "i"
                    ]
                  },
                  "value": "Candidate"
                }
              ]
            }
          },
          {
            "eq": {
              "prime": "currentTerm"
            },
            "arg": {
              "except": "currentTerm",
              "where": [
                {
                  "key": {
                    "tuple": [
                      "i"
                    ]
                  },
                  "value": {
                    "plus": {
                      "applyFun": "currentTerm",
                      "arg": "i"
                    },
                    "arg": 1
                  }
                }
              ]
            }
          },
          {
            "eq": {
              "prime": "votedFor"
            },
            "arg": {
              "except": "votedFor",
              "where": [
                {
                  "key": {
                    "tuple": [
                      "i"
                    ]
                  },
                  "value": "Nil"
                }
              ]
            }
          },
          {
            "eq": {
              "prime": "votesResponded"
            },
            "arg": {
              "except": "votesResponded",
              "where": [
                {
                  "key": {
                    "tuple": [
                      "i"
                    ]
                  },
                  "value": {
                    "enumSet": [
                      
                    ]
                  }
                }
              ]
            }
          },
          {
            "eq": {
              "prime": "votesGranted"
            },
            "arg": {
              "except": "votesGranted",
              "where": [
                {
                  "key": {
                    "tuple": [
                      "i"
                    ]
                  },
                  "value": {
                    "enumSet": [
                      
                    ]
                  }
                }
              ]
            }
          },
          {
            "eq": {
              "prime": "history"
            },
            "arg": {
              "except": "history",
              "where": [
                {
                  "key": {
                    "tuple": [
                      {
                        "str": "server"
                      },
                      "i",
                      {
                        "str": "timeout"
                      }
                    ]
                  },
                  "value": {
                    "plus": {
                      "applyFun": {
                        "applyFun": {
                          "applyFun": "history",
                          "arg": {
                            "str": "server"
                          }
                        },
                        "arg": "i"
                      },
                      "arg": {
                        "str": "timeout"
                      }
                    },
                    "arg": 1
                  }
                },
                {
                  "key": {
                    "tuple": [
                      {
                        "str": "global"
                      }
                    ]
                  },
                  "value": true
                }
              ]
            }
          },
          {
            "unchanged": {
              "tuple": [
                "messages",
                {
                  "applyOp": "leaderVars",
                  "args": [
                    
                  ]
                },
                {
                  "applyOp": "logVars",
                  "args": [
                    
                  ]
                }
              ]
            }
          }
        ]
      },
      "params": [
        {
          "name": "i",
          "arity": 0
        }
      ]
    },
    {
      "operator": "RequestVote",
      "body": {
        "and": [
          {
            "eq": {
              "applyFun": "state",
              "arg": "i"
            },
            "arg": "Candidate"
          },
          {
            "in": "j",
            "arg": {
              "setminus": {
                "applyOp": "GetConfig",
                "args": [
                  "i"
                ]
              },
              "arg": {
                "applyFun": "votesResponded",
                "arg": "i"
              }
            }
          },
          {
            "applyOp": "Send",
            "args": [
              {
                "record": [
                  {
                    "key": {
                      "str": "mtype"
                    },
                    "value": "RequestVoteRequest"
                  },
                  {
                    "key": {
                      "str": "mterm"
                    },
                    "value": {
                      "applyFun": "currentTerm",
                      "arg": "i"
                    }
                  },
                  {
                    "key": {
                      "str": "mlastLogTerm"
                    },
                    "value": {
                      "applyOp": "LastTerm",
                      "args": [
                        {
                          "applyFun": "log",
                          "arg": "i"
                        }
                      ]
                    }
                  },
                  {
                    "key": {
                      "str": "mlastLogIndex"
                    },
                    "value": true
                  },
                  {
                    "key": {
                      "str": "msource"
                    },
                    "value": "i"
                  },
                  {
                    "key": {
                      "str": "mdest"
                    },
                    "value": "j"
                  }
                ]
              }
            ]
          },
          {
            "unchanged": {
              "tuple": [
                {
                  "applyOp": "serverVars",
                  "args": [
                    
                  ]
                },
                {
                  "applyOp": "candidateVars",
                  "args": [
                    
                  ]
                },
                {
                  "applyOp": "leaderVars",
                  "args": [
                    
                  ]
                },
                {
                  "applyOp": "logVars",
                  "args": [
                    
                  ]
                }
              ]
            }
          }
        ]
      },
      "params": [
        {
          "name": "i",
          "arity": 0
        },
        {
          "name": "j",
          "arity": 0
        }
      ]
    },
    {
      "operator": "AppendEntries",
      "body": {
        "and": [
          {
            "ne": "i",
            "arg": "j"
          },
          {
            "eq": {
              "applyFun": "state",
              "arg": "i"
            },
            "arg": "Leader"
          },
          {
            "in": "j",
            "arg": {
              "applyOp": "GetConfig",
              "args": [
                "i"
              ]
            }
          },
          {
            "let": [
              {
                "operator": "prevLogIndex",
                "body": {
                  "minus": {
                    "applyFun": {
                      "applyFun": "nextIndex",
                      "arg": "i"
                    },
                    "arg": "j"
                  },
                  "arg": 1
                },
                "params": [
                  
                ]
              },
              {
                "operator": "prevLogTerm",
                "body": {
                  "if": {
                    "and": [
                      {
                        "gt": {
                          "applyOp": "prevLogIndex",
                          "args": [
                            
                          ]
                        },
                        "arg": 0
                      },
                      {
                        "le": {
                          "applyOp": "prevLogIndex",
                          "args": [
                            
                          ]
                        },
                        "arg": true
                      }
                    ]
                  },
                  "then": {
                    "applyFun": {
                      "applyFun": {
                        "applyFun": "log",
                        "arg": "i"
                      },
                      "arg": {
                        "applyOp": "prevLogIndex",
                        "args": [
                          
                        ]
                      }
                    },
                    "arg": {
                      "str": "term"
                    }
                  },
                  "else": 0
                },
                "params": [
                  
                ]
              },
              {
                "operator": "lastEntry",
                "body": {
                  "applyOp": "Min",
                  "args": [
                    {
                      "enumSet": [
                        true,
                        {
                          "applyFun": {
                            "applyFun": "nextIndex",
                            "arg": "i"
                          },
                          "arg": "j"
                        }
                      ]
                    }
                  ]
                },
                "params": [
                  
                ]
              },
              {
                "operator": "entries",
                "body": true,
                "params": [
                  
                ]
              }
            ],
            "body": {
              "applyOp": "Send",
              "args": [
                {
                  "record": [
                    {
                      "key": {
                        "str": "mtype"
                      },
                      "value": "AppendEntriesRequest"
                    },
                    {
                      "key": {
                        "str": "mterm"
                      },
                      "value": {
                        "applyFun": "currentTerm",
                        "arg": "i"
                      }
                    },
                    {
                      "key": {
                        "str": "mprevLogIndex"
                      },
                      "value": {
                        "applyOp": "prevLogIndex",
                        "args": [
                          
                        ]
                      }
                    },
                    {
                      "key": {
                        "str": "mprevLogTerm"
                      },
                      "value": {
                        "applyOp": "prevLogTerm",
                        "args": [
                          
                        ]
                      }
                    },
                    {
                      "key": {
                        "str": "mentries"
                      },
                      "value": {
                        "applyOp": "entries",
                        "args": [
                          
                        ]
                      }
                    },
                    {
                      "key": {
                        "str": "mcommitIndex"
                      },
                      "value": {
                        "applyOp": "Min",
                        "args": [
                          {
                            "enumSet": [
                              {
                                "applyFun": "commitIndex",
                                "arg": "i"
                              },
                              {
                                "applyOp": "lastEntry",
                                "args": [
                                  
                                ]
                              }
                            ]
                          }
                        ]
                      }
                    },
                    {
                      "key": {
                        "str": "msource"
                      },
                      "value": "i"
                    },
                    {
                      "key": {
                        "str": "mdest"
                      },
                      "value": "j"
                    }
                  ]
                }
              ]
            }
          },
          {
            "unchanged": {
              "tuple": [
                {
                  "applyOp": "serverVars",
                  "args": [
                    
                  ]
                },
                {
                  "applyOp": "candidateVars",
                  "args": [
                    
                  ]
                },
                {
                  "applyOp": "leaderVars",
                  "args": [
                    
                  ]
                },
                {
                  "applyOp": "logVars",
                  "args": [
                    
                  ]
                }
              ]
            }
          }
        ]
      },
      "params": [
        {
          "name": "i",
          "arity": 0
        },
        {
          "name": "j",
          "arity": 0
        }
      ]
    },
    {
      "operator": "AdvanceCommitIndex",
      "body": {
        "and": [
          {
            "eq": {
              "applyFun": "state",
              "arg": "i"
            },
            "arg": "Leader"
          },
          {
            "let": [
              {
                "operator": "Agree",
                "body": {
                  "cup": {
                    "enumSet": [
                      "i"
                    ]
                  },
                  "arg": {
                    "filter": {
                      "key": "k",
                      "value": {
                        "applyOp": "GetConfig",
                        "args": [
                          "i"
                        ]
                      }
                    },
                    "that": {
                      "ge": {
                        "applyFun": {
                          "applyFun": "matchIndex",
                          "arg": "i"
                        },
                        "arg": "k"
                      },
                      "arg": "index"
                    }
                  }
                },
                "params": [
                  {
                    "name": "index",
                    "arity": 0
                  }
                ]
              },
              {
                "operator": "logSize",
                "body": true,
                "params": [
                  
                ]
              },
              {
                "operator": "agreeIndexes",
                "body": {
                  "filter": {
                    "key": "index",
                    "value": {
                      "dotdot": 1,
                      "arg": {
                        "applyOp": "logSize",
                        "args": [
                          
                        ]
                      }
                    }
                  },
                  "that": {
                    "in": {
                      "applyOp": "Agree",
                      "args": [
                        "index"
                      ]
                    },
                    "arg": {
                      "applyOp": "Quorum",
                      "args": [
                        {
                          "applyOp": "GetConfig",
                          "args": [
                            "i"
                          ]
                        }
                      ]
                    }
                  }
                },
                "params": [
                  
                ]
              },
              {
                "operator": "newCommitIndex",
                "body": {
                  "if": {
                    "and": [
                      {
                        "ne": {
                          "applyOp": "agreeIndexes",
                          "args": [
                            
                          ]
                        },
                        "arg": {
                          "enumSet": [
                            
                          ]
                        }
                      },
                      {
                        "eq": {
                          "applyFun": {
                            "applyFun": {
                              "applyFun": "log",
                              "arg": "i"
                            },
                            "arg": {
                              "applyOp": "Max",
                              "args": [
                                {
                                  "applyOp": "agreeIndexes",
                                  "args": [
                                    
                                  ]
                                }
                              ]
                            }
                          },
                          "arg": {
                            "str": "term"
                          }
                        },
                        "arg": {
                          "applyFun": "currentTerm",
                          "arg": "i"
                        }
                      }
                    ]
                  },
                  "then": {
                    "applyOp": "Max",
                    "args": [
                      {
                        "applyOp": "agreeIndexes",
                        "args": [
                          
                        ]
                      }
                    ]
                  },
                  "else": {
                    "applyFun": "commitIndex",
                    "arg": "i"
                  }
                },
                "params": [
                  
                ]
              },
              {
                "operator": "committed",
                "body": {
                  "gt": {
                    "applyOp": "newCommitIndex",
                    "args": [
                      
                    ]
                  },
                  "arg": {
                    "applyFun": "commitIndex",
                    "arg": "i"
                  }
                },
                "params": [
                  
                ]
              },
              {
                "operator": "committedMembershipChange",
                "body": {
                  "and": [
                    {
                      "applyOp": "committed",
                      "args": [
                        
                      ]
                    },
                    {
                      "eq": {
                        "applyFun": {
                          "applyFun": {
                            "applyFun": "log",
                            "arg": "i"
                          },
                          "arg": {
                            "applyOp": "newCommitIndex",
                            "args": [
                              
                            ]
                          }
                        },
                        "arg": {
                          "str": "type"
                        }
                      },
                      "arg": "ConfigEntry"
                    },
                    {
                      "ne": {
                        "applyFun": {
                          "applyFun": {
                            "applyFun": "log",
                            "arg": "i"
                          },
                          "arg": {
                            "applyOp": "newCommitIndex",
                            "args": [
                              
                            ]
                          }
                        },
                        "arg": {
                          "str": "value"
                        }
                      },
                      "arg": {
                        "applyOp": "GetHistoricalConfig",
                        "args": [
                          "i",
                          {
                            "record": [
                              {
                                "key": {
                                  "str": "log"
                                },
                                "value": {
                                  "except": "log",
                                  "where": [
                                    {
                                      "key": {
                                        "tuple": [
                                          "i"
                                        ]
                                      },
                                      "value": true
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        ]
                      }
                    }
                  ]
                },
                "params": [
                  
                ]
              }
            ],
            "body": {
              "and": [
                {
                  "eq": {
                    "prime": "commitIndex"
                  },
                  "arg": {
                    "except": "commitIndex",
                    "where": [
                      {
                        "key": {
                          "tuple": [
                            "i"
                          ]
                        },
                        "value": {
                          "applyOp": "newCommitIndex",
                          "args": [
                            
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "if": {
                    "applyOp": "committedMembershipChange",
                    "args": [
                      
                    ]
                  },
                  "then": {
                    "eq": {
                      "prime": "history"
                    },
                    "arg": {
                      "except": "history",
                      "where": [
                        {
                          "key": {
                            "tuple": [
                              {
                                "str": "global"
                              }
                            ]
                          },
                          "value": true
                        }
                      ]
                    }
                  },
                  "else": {
                    "if": {
                      "applyOp": "committed",
                      "args": [
                        
                      ]
                    },
                    "then": {
                      "eq": {
                        "prime": "history"
                      },
                      "arg": {
                        "except": "history",
                        "where": [
                          {
                            "key": {
                              "tuple": [
                                {
                                  "str": "global"
                                }
                              ]
                            },
                            "value": true
                          }
                        ]
                      }
                    },
                    "else": {
                      "unchanged": {
                        "tuple": [
                          "history"
                        ]
                      }
                    }
                  }
                }
              ]
            }
          },
          {
            "unchanged": {
              "tuple": [
                "messages",
                {
                  "applyOp": "serverVars",
                  "args": [
                    
                  ]
                },
                {
                  "applyOp": "candidateVars",
                  "args": [
                    
                  ]
                },
                {
                  "applyOp": "leaderVars",
                  "args": [
                    
                  ]
                },
                "log"
              ]
            }
          }
        ]
      },
      "params": [
        {
          "name": "i",
          "arity": 0
        }
      ]
    },
    {
      "operator": "AddNewServer",
      "body": {
        "and": [
          {
            "eq": {
              "applyFun": "state",
              "arg": "i"
            },
            "arg": "Leader"
          },
          {
            "notin": "j",
            "arg": {
              "applyOp": "GetConfig",
              "args": [
                "i"
              ]
            }
          },
          {
            "eq": {
              "prime": "currentTerm"
            },
            "arg": {
              "except": "currentTerm",
              "where": [
                {
                  "key": {
                    "tuple": [
                      "j"
                    ]
                  },
                  "value": 1
                }
              ]
            }
          },
          {
            "eq": {
              "prime": "votedFor"
            },
            "arg": {
              "except": "votedFor",
              "where": [
                {
                  "key": {
                    "tuple": [
                      "j"
                    ]
                  },
                  "value": "Nil"
                }
              ]
            }
          },
          {
            "applyOp": "Send",
            "args": [
              {
                "record": [
                  {
                    "key": {
                      "str": "mtype"
                    },
                    "value": "CatchupRequest"
                  },
                  {
                    "key": {
                      "str": "mterm"
                    },
                    "value": {
                      "applyFun": "currentTerm",
                      "arg": "i"
                    }
                  },
                  {
                    "key": {
                      "str": "mlogLen"
                    },
                    "value": {
                      "applyFun": {
                        "applyFun": "matchIndex",
                        "arg": "i"
                      },
                      "arg": "j"
                    }
                  },
                  {
                    "key": {
                      "str": "mentries"
                    },
                    "value": true
                  },
                  {
                    "key": {
                      "str": "mcommitIndex"
                    },
                    "value": {
                      "applyFun": "commitIndex",
                      "arg": "i"
                    }
                  },
                  {
                    "key": {
                      "str": "msource"
                    },
                    "value": "i"
                  },
                  {
                    "key": {
                      "str": "mdest"
                    },
                    "value": "j"
                  },
                  {
                    "key": {
                      "str": "mrounds"
                    },
                    "value": "NumRounds"
                  }
                ]
              }
            ]
          },
          {
            "unchanged": {
              "tuple": [
                "state",
                {
                  "applyOp": "leaderVars",
                  "args": [
                    
                  ]
                },
                {
                  "applyOp": "logVars",
                  "args": [
                    
                  ]
                },
                {
                  "applyOp": "candidateVars",
                  "args": [
                    
                  ]
                }
              ]
            }
          }
        ]
      },
      "params": [
        {
          "name": "i",
          "arity": 0
        },
        {
          "name": "j",
          "arity": 0
        }
      ]
    },
    {
      "operator": "DeleteServer",
      "body": {
        "and": [
          {
            "eq": {
              "applyFun": "state",
              "arg": "i"
            },
            "arg": "Leader"
          },
          {
            "in": {
              "applyFun": "state",
              "arg": "j"
            },
            "arg": {
              "enumSet": [
                "Follower",
                "Candidate"
              ]
            }
          },
          {
            "in": "j",
            "arg": {
              "applyOp": "GetConfig",
              "args": [
                "i"
              ]
            }
          },
          {
            "ne": "j",
            "arg": "i"
          },
          {
            "applyOp": "Send",
            "args": [
              {
                "record": [
                  {
                    "key": {
                      "str": "mtype"
                    },
                    "value": "CheckOldConfig"
                  },
                  {
                    "key": {
                      "str": "mterm"
                    },
                    "value": {
                      "applyFun": "currentTerm",
                      "arg": "i"
                    }
                  },
                  {
                    "key": {
                      "str": "madd"
                    },
                    "value": false
                  },
                  {
                    "key": {
                      "str": "mserver"
                    },
                    "value": "j"
                  },
                  {
                    "key": {
                      "str": "msource"
                    },
                    "value": "i"
                  },
                  {
                    "key": {
                      "str": "mdest"
                    },
                    "value": "i"
                  }
                ]
              }
            ]
          },
          {
            "unchanged": {
              "tuple": [
                {
                  "applyOp": "serverVars",
                  "args": [
                    
                  ]
                },
                {
                  "applyOp": "candidateVars",
                  "args": [
                    
                  ]
                },
                {
                  "applyOp": "leaderVars",
                  "args": [
                    
                  ]
                },
                {
                  "applyOp": "logVars",
                  "args": [
                    
                  ]
                }
              ]
            }
          }
        ]
      },
      "params": [
        {
          "name": "i",
          "arity": 0
        },
        {
          "name": "j",
          "arity": 0
        }
      ]
    },
    {
      "operator": "HandleRequestVoteRequest",
      "body": {
        "let": [
          {
            "operator": "logOk",
            "body": {
              "or": [
                {
                  "gt": {
                    "applyFun": "m",
                    "arg": {
                      "str": "mlastLogTerm"
                    }
                  },
                  "arg": {
                    "applyOp": "LastTerm",
                    "args": [
                      {
                        "applyFun": "log",
                        "arg": "i"
                      }
                    ]
                  }
                },
                {
                  "and": [
                    {
                      "eq": {
                        "applyFun": "m",
                        "arg": {
                          "str": "mlastLogTerm"
                        }
                      },
                      "arg": {
                        "applyOp": "LastTerm",
                        "args": [
                          {
                            "applyFun": "log",
                            "arg": "i"
                          }
                        ]
                      }
                    },
                    {
                      "ge": {
                        "applyFun": "m",
                        "arg": {
                          "str": "mlastLogIndex"
                        }
                      },
                      "arg": true
                    }
                  ]
                }
              ]
            },
            "params": [
              
            ]
          },
          {
            "operator": "grant",
            "body": {
              "and": [
                {
                  "eq": {
                    "applyFun": "m",
                    "arg": {
                      "str": "mterm"
                    }
                  },
                  "arg": {
                    "applyFun": "currentTerm",
                    "arg": "i"
                  }
                },
                {
                  "applyOp": "logOk",
                  "args": [
                    
                  ]
                },
                {
                  "in": {
                    "applyFun": "votedFor",
                    "arg": "i"
                  },
                  "arg": {
                    "enumSet": [
                      "Nil",
                      "j"
                    ]
                  }
                }
              ]
            },
            "params": [
              
            ]
          }
        ],
        "body": {
          "and": [
            {
              "le": {
                "applyFun": "m",
                "arg": {
                  "str": "mterm"
                }
              },
              "arg": {
                "applyFun": "currentTerm",
                "arg": "i"
              }
            },
            {
              "or": [
                {
                  "and": [
                    {
                      "applyOp": "grant",
                      "args": [
                        
                      ]
                    },
                    {
                      "eq": {
                        "prime": "votedFor"
                      },
                      "arg": {
                        "except": "votedFor",
                        "where": [
                          {
                            "key": {
                              "tuple": [
                                "i"
                              ]
                            },
                            "value": "j"
                          }
                        ]
                      }
                    }
                  ]
                },
                {
                  "and": [
                    {
                      "not": {
                        "applyOp": "grant",
                        "args": [
                          
                        ]
                      }
                    },
                    {
                      "unchanged": "votedFor"
                    }
                  ]
                }
              ]
            },
            {
              "applyOp": "Reply",
              "args": [
                {
                  "record": [
                    {
                      "key": {
                        "str": "mtype"
                      },
                      "value": "RequestVoteResponse"
                    },
                    {
                      "key": {
                        "str": "mterm"
                      },
                      "value": {
                        "applyFun": "currentTerm",
                        "arg": "i"
                      }
                    },
                    {
                      "key": {
                        "str": "mvoteGranted"
                      },
                      "value": {
                        "applyOp": "grant",
                        "args": [
                          
                        ]
                      }
                    },
                    {
                      "key": {
                        "str": "mlog"
                      },
                      "value": {
                        "applyFun": "log",
                        "arg": "i"
                      }
                    },
                    {
                      "key": {
                        "str": "msource"
                      },
                      "value": "i"
                    },
                    {
                      "key": {
                        "str": "mdest"
                      },
                      "value": "j"
                    }
                  ]
                },
                "m"
              ]
            },
            {
              "unchanged": {
                "tuple": [
                  "state",
                  "currentTerm",
                  {
                    "applyOp": "candidateVars",
                    "args": [
                      
                    ]
                  },
                  {
                    "applyOp": "leaderVars",
                    "args": [
                      
                    ]
                  },
                  {
                    "applyOp": "logVars",
                    "args": [
                      
                    ]
                  }
                ]
              }
            }
          ]
        }
      },
      "params": [
        {
          "name": "i",
          "arity": 0
        },
        {
          "name": "j",
          "arity": 0
        },
        {
          "name": "m",
          "arity": 0
        }
      ]
    },
    {
      "operator": "HandleRequestVoteResponse",
      "body": {
        "and": [
          {
            "eq": {
              "applyFun": "m",
              "arg": {
                "str": "mterm"
              }
            },
            "arg": {
              "applyFun": "currentTerm",
              "arg": "i"
            }
          },
          {
            "eq": {
              "prime": "votesResponded"
            },
            "arg": {
              "except": "votesResponded",
              "where": [
                {
                  "key": {
                    "tuple": [
                      "i"
                    ]
                  },
                  "value": {
                    "cup": {
                      "applyFun": "votesResponded",
                      "arg": "i"
                    },
                    "arg": {
                      "enumSet": [
                        "j"
                      ]
                    }
                  }
                }
              ]
            }
          },
          {
            "or": [
              {
                "and": [
                  {
                    "applyFun": "m",
                    "arg": {
                      "str": "mvoteGranted"
                    }
                  },
                  {
                    "eq": {
                      "prime": "votesGranted"
                    },
                    "arg": {
                      "except": "votesGranted",
                      "where": [
                        {
                          "key": {
                            "tuple": [
                              "i"
                            ]
                          },
                          "value": {
                            "cup": {
                              "applyFun": "votesGranted",
                              "arg": "i"
                            },
                            "arg": {
                              "enumSet": [
                                "j"
                              ]
                            }
                          }
                        }
                      ]
                    }
                  }
                ]
              },
              {
                "and": [
                  {
                    "not": {
                      "applyFun": "m",
                      "arg": {
                        "str": "mvoteGranted"
                      }
                    }
                  },
                  {
                    "unchanged": {
                      "tuple": [
                        "votesGranted"
                      ]
                    }
                  }
                ]
              }
            ]
          },
          {
            "applyOp": "Discard",
            "args": [
              "m"
            ]
          },
          {
            "unchanged": {
              "tuple": [
                {
                  "applyOp": "serverVars",
                  "args": [
                    
                  ]
                },
                "votedFor",
                {
                  "applyOp": "leaderVars",
                  "args": [
                    
                  ]
                },
                {
                  "applyOp": "logVars",
                  "args": [
                    
                  ]
                }
              ]
            }
          }
        ]
      },
      "params": [
        {
          "name": "i",
          "arity": 0
        },
        {
          "name": "j",
          "arity": 0
        },
        {
          "name": "m",
          "arity": 0
        }
      ]
    },
    {
      "operator": "RejectAppendEntriesRequest",
      "body": {
        "and": [
          {
            "or": [
              {
                "lt": {
                  "applyFun": "m",
                  "arg": {
                    "str": "mterm"
                  }
                },
                "arg": {
                  "applyFun": "currentTerm",
                  "arg": "i"
                }
              },
              {
                "and": [
                  {
                    "eq": {
                      "applyFun": "m",
                      "arg": {
                        "str": "mterm"
                      }
                    },
                    "arg": {
                      "applyFun": "currentTerm",
                      "arg": "i"
                    }
                  },
                  {
                    "eq": {
                      "applyFun": "state",
                      "arg": "i"
                    },
                    "arg": "Follower"
                  },
                  {
                    "not": "logOk"
                  }
                ]
              }
            ]
          },
          {
            "applyOp": "Reply",
            "args": [
              {
                "record": [
                  {
                    "key": {
                      "str": "mtype"
                    },
                    "value": "AppendEntriesResponse"
                  },
                  {
                    "key": {
                      "str": "mterm"
                    },
                    "value": {
                      "applyFun": "currentTerm",
                      "arg": "i"
                    }
                  },
                  {
                    "key": {
                      "str": "msuccess"
                    },
                    "value": false
                  },
                  {
                    "key": {
                      "str": "mmatchIndex"
                    },
                    "value": 0
                  },
                  {
                    "key": {
                      "str": "msource"
                    },
                    "value": "i"
                  },
                  {
                    "key": {
                      "str": "mdest"
                    },
                    "value": "j"
                  }
                ]
              },
              "m"
            ]
          },
          {
            "unchanged": {
              "tuple": [
                {
                  "applyOp": "serverVars",
                  "args": [
                    
                  ]
                },
                {
                  "applyOp": "logVars",
                  "args": [
                    
                  ]
                }
              ]
            }
          }
        ]
      },
      "params": [
        {
          "name": "i",
          "arity": 0
        },
        {
          "name": "j",
          "arity": 0
        },
        {
          "name": "m",
          "arity": 0
        },
        {
          "name": "logOk",
          "arity": 0
        }
      ]
    },
    {
      "operator": "AppendEntriesAlreadyDone",
      "body": {
        "and": [
          {
            "or": [
              {
                "eq": {
                  "applyFun": "m",
                  "arg": {
                    "str": "mentries"
                  }
                },
                "arg": {
                  "tuple": [
                    
                  ]
                }
              },
              {
                "and": [
                  {
                    "ne": {
                      "applyFun": "m",
                      "arg": {
                        "str": "mentries"
                      }
                    },
                    "arg": {
                      "tuple": [
                        
                      ]
                    }
                  },
                  {
                    "ge": true,
                    "arg": "index"
                  },
                  {
                    "eq": {
                      "applyFun": {
                        "applyFun": {
                          "applyFun": "log",
                          "arg": "i"
                        },
                        "arg": "index"
                      },
                      "arg": {
                        "str": "term"
                      }
                    },
                    "arg": {
                      "applyFun": {
                        "applyFun": {
                          "applyFun": "m",
                          "arg": {
                            "str": "mentries"
                          }
                        },
                        "arg": 1
                      },
                      "arg": {
                        "str": "term"
                      }
                    }
                  }
                ]
              }
            ]
          },
          {
            "eq": {
              "prime": "commitIndex"
            },
            "arg": {
              "except": "commitIndex",
              "where": [
                {
                  "key": {
                    "tuple": [
                      "i"
                    ]
                  },
                  "value": {
                    "applyFun": "m",
                    "arg": {
                      "str": "mcommitIndex"
                    }
                  }
                }
              ]
            }
          },
          {
            "applyOp": "Reply",
            "args": [
              {
                "record": [
                  {
                    "key": {
                      "str": "mtype"
                    },
                    "value": "AppendEntriesResponse"
                  },
                  {
                    "key": {
                      "str": "mterm"
                    },
                    "value": {
                      "applyFun": "currentTerm",
                      "arg": "i"
                    }
                  },
                  {
                    "key": {
                      "str": "msuccess"
                    },
                    "value": true
                  },
                  {
                    "key": {
                      "str": "mmatchIndex"
                    },
                    "value": {
                      "plus": {
                        "applyFun": "m",
                        "arg": {
                          "str": "mprevLogIndex"
                        }
                      },
                      "arg": true
                    }
                  },
                  {
                    "key": {
                      "str": "msource"
                    },
                    "value": "i"
                  },
                  {
                    "key": {
                      "str": "mdest"
                    },
                    "value": "j"
                  }
                ]
              },
              "m"
            ]
          },
          {
            "unchanged": {
              "tuple": [
                {
                  "applyOp": "serverVars",
                  "args": [
                    
                  ]
                },
                "log"
              ]
            }
          }
        ]
      },
      "params": [
        {
          "name": "i",
          "arity": 0
        },
        {
          "name": "j",
          "arity": 0
        },
        {
          "name": "index",
          "arity": 0
        },
        {
          "name": "m",
          "arity": 0
        }
      ]
    },
    {
      "operator": "HandleAppendEntriesResponse",
      "body": {
        "and": [
          {
            "eq": {
              "applyFun": "m",
              "arg": {
                "str": "mterm"
              }
            },
            "arg": {
              "applyFun": "currentTerm",
              "arg": "i"
            }
          },
          {
            "or": [
              {
                "and": [
                  {
                    "applyFun": "m",
                    "arg": {
                      "str": "msuccess"
                    }
                  },
                  {
                    "eq": {
                      "prime": "nextIndex"
                    },
                    "arg": {
                      "except": "nextIndex",
                      "where": [
                        {
                          "key": {
                            "tuple": [
                              "i",
                              "j"
                            ]
                          },
                          "value": {
                            "plus": {
                              "applyFun": "m",
                              "arg": {
                                "str": "mmatchIndex"
                              }
                            },
                            "arg": 1
                          }
                        }
                      ]
                    }
                  },
                  {
                    "eq": {
                      "prime": "matchIndex"
                    },
                    "arg": {
                      "except": "matchIndex",
                      "where": [
                        {
                          "key": {
                            "tuple": [
                              "i",
                              "j"
                            ]
                          },
                          "value": {
                            "applyFun": "m",
                            "arg": {
                              "str": "mmatchIndex"
                            }
                          }
                        }
                      ]
                    }
                  }
                ]
              },
              {
                "and": [
                  {
                    "not": {
                      "applyFun": "m",
                      "arg": {
                        "str": "msuccess"
                      }
                    }
                  },
                  {
                    "eq": {
                      "prime": "nextIndex"
                    },
                    "arg": {
                      "except": "nextIndex",
                      "where": [
                        {
                          "key": {
                            "tuple": [
                              "i",
                              "j"
                            ]
                          },
                          "value": {
                            "applyOp": "Max",
                            "args": [
                              {
                                "enumSet": [
                                  {
                                    "minus": {
                                      "applyFun": {
                                        "applyFun": "nextIndex",
                                        "arg": "i"
                                      },
                                      "arg": "j"
                                    },
                                    "arg": 1
                                  },
                                  1
                                ]
                              }
                            ]
                          }
                        }
                      ]
                    }
                  },
                  {
                    "unchanged": {
                      "tuple": [
                        "matchIndex"
                      ]
                    }
                  }
                ]
              }
            ]
          },
          {
            "applyOp": "Discard",
            "args": [
              "m"
            ]
          },
          {
            "unchanged": {
              "tuple": [
                {
                  "applyOp": "serverVars",
                  "args": [
                    
                  ]
                },
                {
                  "applyOp": "candidateVars",
                  "args": [
                    
                  ]
                },
                {
                  "applyOp": "logVars",
                  "args": [
                    
                  ]
                }
              ]
            }
          }
        ]
      },
      "params": [
        {
          "name": "i",
          "arity": 0
        },
        {
          "name": "j",
          "arity": 0
        },
        {
          "name": "m",
          "arity": 0
        }
      ]
    },
    {
      "operator": "HandleCatchupRequest",
      "body": {
        "or": [
          {
            "and": [
              {
                "lt": {
                  "applyFun": "m",
                  "arg": {
                    "str": "mterm"
                  }
                },
                "arg": {
                  "applyFun": "currentTerm",
                  "arg": "i"
                }
              },
              {
                "applyOp": "Reply",
                "args": [
                  {
                    "record": [
                      {
                        "key": {
                          "str": "mtype"
                        },
                        "value": "CatchupResponse"
                      },
                      {
                        "key": {
                          "str": "mterm"
                        },
                        "value": {
                          "applyFun": "currentTerm",
                          "arg": "i"
                        }
                      },
                      {
                        "key": {
                          "str": "msuccess"
                        },
                        "value": false
                      },
                      {
                        "key": {
                          "str": "mmatchIndex"
                        },
                        "value": 0
                      },
                      {
                        "key": {
                          "str": "msource"
                        },
                        "value": "i"
                      },
                      {
                        "key": {
                          "str": "mdest"
                        },
                        "value": "j"
                      },
                      {
                        "key": {
                          "str": "mroundsLeft"
                        },
                        "value": 0
                      }
                    ]
                  },
                  "m"
                ]
              },
              {
                "unchanged": {
                  "tuple": [
                    {
                      "applyOp": "serverVars",
                      "args": [
                        
                      ]
                    },
                    {
                      "applyOp": "candidateVars",
                      "args": [
                        
                      ]
                    },
                    {
                      "applyOp": "leaderVars",
                      "args": [
                        
                      ]
                    },
                    {
                      "applyOp": "logVars",
                      "args": [
                        
                      ]
                    }
                  ]
                }
              }
            ]
          },
          {
            "and": [
              {
                "ge": {
                  "applyFun": "m",
                  "arg": {
                    "str": "mterm"
                  }
                },
                "arg": {
                  "applyFun": "currentTerm",
                  "arg": "i"
                }
              },
              {
                "eq": {
                  "prime": "currentTerm"
                },
                "arg": {
                  "except": "currentTerm",
                  "where": [
                    {
                      "key": {
                        "tuple": [
                          "i"
                        ]
                      },
                      "value": {
                        "applyFun": "m",
                        "arg": {
                          "str": "mterm"
                        }
                      }
                    }
                  ]
                }
              },
              {
                "eq": {
                  "prime": "log"
                },
                "arg": {
                  "except": "log",
                  "where": [
                    {
                      "key": {
                        "tuple": [
                          "i"
                        ]
                      },
                      "value": {
                        "if": {
                          "eq": {
                            "applyFun": "log",
                            "arg": "i"
                          },
                          "arg": {
                            "tuple": [
                              
                            ]
                          }
                        },
                        "then": {
                          "applyFun": "m",
                          "arg": {
                            "str": "mentries"
                          }
                        },
                        "else": {
                          "concat": true,
                          "arg": {
                            "applyFun": "m",
                            "arg": {
                              "str": "mentries"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              },
              {
                "applyOp": "Reply",
                "args": [
                  {
                    "record": [
                      {
                        "key": {
                          "str": "mtype"
                        },
                        "value": "CatchupResponse"
                      },
                      {
                        "key": {
                          "str": "mterm"
                        },
                        "value": {
                          "applyFun": "m",
                          "arg": {
                            "str": "mterm"
                          }
                        }
                      },
                      {
                        "key": {
                          "str": "msuccess"
                        },
                        "value": true
                      },
                      {
                        "key": {
                          "str": "mmatchIndex"
                        },
                        "value": true
                      },
                      {
                        "key": {
                          "str": "msource"
                        },
                        "value": "i"
                      },
                      {
                        "key": {
                          "str": "mdest"
                        },
                        "value": "j"
                      },
                      {
                        "key": {
                          "str": "mroundsLeft"
                        },
                        "value": {
                          "minus": {
                            "applyFun": "m",
                            "arg": {
                              "str": "mrounds"
                            }
                          },
                          "arg": 1
                        }
                      }
                    ]
                  },
                  "m"
                ]
              },
              {
                "unchanged": {
                  "tuple": [
                    "state",
                    "votedFor",
                    {
                      "applyOp": "candidateVars",
                      "args": [
                        
                      ]
                    },
                    {
                      "applyOp": "leaderVars",
                      "args": [
                        
                      ]
                    },
                    "commitIndex"
                  ]
                }
              }
            ]
          }
        ]
      },
      "params": [
        {
          "name": "i",
          "arity": 0
        },
        {
          "name": "j",
          "arity": 0
        },
        {
          "name": "m",
          "arity": 0
        }
      ]
    },
    {
      "operator": "HandleCatchupResponse",
      "body": {
        "and": [
          {
            "or": [
              {
                "and": [
                  {
                    "applyFun": "m",
                    "arg": {
                      "str": "msuccess"
                    }
                  },
                  {
                    "or": [
                      {
                        "and": [
                          {
                            "ne": {
                              "applyFun": "m",
                              "arg": {
                                "str": "mmatchIndex"
                              }
                            },
                            "arg": {
                              "applyFun": "commitIndex",
                              "arg": "i"
                            }
                          },
                          {
                            "ne": {
                              "applyFun": "m",
                              "arg": {
                                "str": "mmatchIndex"
                              }
                            },
                            "arg": {
                              "applyFun": {
                                "applyFun": "matchIndex",
                                "arg": "i"
                              },
                              "arg": "j"
                            }
                          }
                        ]
                      },
                      {
                        "eq": {
                          "applyFun": "m",
                          "arg": {
                            "str": "mmatchIndex"
                          }
                        },
                        "arg": {
                          "applyFun": "commitIndex",
                          "arg": "i"
                        }
                      }
                    ]
                  },
                  {
                    "eq": {
                      "applyFun": "state",
                      "arg": "i"
                    },
                    "arg": "Leader"
                  },
                  {
                    "eq": {
                      "applyFun": "m",
                      "arg": {
                        "str": "mterm"
                      }
                    },
                    "arg": {
                      "applyFun": "currentTerm",
                      "arg": "i"
                    }
                  },
                  {
                    "notin": "j",
                    "arg": {
                      "applyOp": "GetConfig",
                      "args": [
                        "i"
                      ]
                    }
                  },
                  {
                    "eq": {
                      "prime": "nextIndex"
                    },
                    "arg": {
                      "except": "nextIndex",
                      "where": [
                        {
                          "key": {
                            "tuple": [
                              "i",
                              "j"
                            ]
                          },
                          "value": {
                            "plus": {
                              "applyFun": "m",
                              "arg": {
                                "str": "mmatchIndex"
                              }
                            },
                            "arg": 1
                          }
                        }
                      ]
                    }
                  },
                  {
                    "eq": {
                      "prime": "matchIndex"
                    },
                    "arg": {
                      "except": "matchIndex",
                      "where": [
                        {
                          "key": {
                            "tuple": [
                              "i",
                              "j"
                            ]
                          },
                          "value": {
                            "applyFun": "m",
                            "arg": {
                              "str": "mmatchIndex"
                            }
                          }
                        }
                      ]
                    }
                  },
                  {
                    "or": [
                      {
                        "and": [
                          {
                            "ne": {
                              "applyFun": "m",
                              "arg": {
                                "str": "mroundsLeft"
                              }
                            },
                            "arg": 0
                          },
                          {
                            "applyOp": "Reply",
                            "args": [
                              {
                                "record": [
                                  {
                                    "key": {
                                      "str": "mtype"
                                    },
                                    "value": "CatchupRequest"
                                  },
                                  {
                                    "key": {
                                      "str": "mterm"
                                    },
                                    "value": {
                                      "applyFun": "currentTerm",
                                      "arg": "i"
                                    }
                                  },
                                  {
                                    "key": {
                                      "str": "mentries"
                                    },
                                    "value": true
                                  },
                                  {
                                    "key": {
                                      "str": "mlogLen"
                                    },
                                    "value": {
                                      "minus": {
                                        "applyFun": {
                                          "applyFun": "nextIndex",
                                          "arg": "i"
                                        },
                                        "arg": "j"
                                      },
                                      "arg": 1
                                    }
                                  },
                                  {
                                    "key": {
                                      "str": "msource"
                                    },
                                    "value": "i"
                                  },
                                  {
                                    "key": {
                                      "str": "mdest"
                                    },
                                    "value": "j"
                                  },
                                  {
                                    "key": {
                                      "str": "mrounds"
                                    },
                                    "value": {
                                      "applyFun": "m",
                                      "arg": {
                                        "str": "mroundsLeft"
                                      }
                                    }
                                  }
                                ]
                              },
                              "m"
                            ]
                          }
                        ]
                      },
                      {
                        "and": [
                          {
                            "eq": {
                              "applyFun": "m",
                              "arg": {
                                "str": "mroundsLeft"
                              }
                            },
                            "arg": 0
                          },
                          {
                            "applyOp": "Reply",
                            "args": [
                              {
                                "record": [
                                  {
                                    "key": {
                                      "str": "mtype"
                                    },
                                    "value": "CheckOldConfig"
                                  },
                                  {
                                    "key": {
                                      "str": "mterm"
                                    },
                                    "value": {
                                      "applyFun": "currentTerm",
                                      "arg": "i"
                                    }
                                  },
                                  {
                                    "key": {
                                      "str": "madd"
                                    },
                                    "value": true
                                  },
                                  {
                                    "key": {
                                      "str": "mserver"
                                    },
                                    "value": "j"
                                  },
                                  {
                                    "key": {
                                      "str": "msource"
                                    },
                                    "value": "i"
                                  },
                                  {
                                    "key": {
                                      "str": "mdest"
                                    },
                                    "value": "i"
                                  }
                                ]
                              },
                              "m"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "and": [
                  {
                    "or": [
                      {
                        "not": {
                          "applyFun": "m",
                          "arg": {
                            "str": "msuccess"
                          }
                        }
                      },
                      {
                        "and": [
                          {
                            "or": [
                              {
                                "eq": {
                                  "applyFun": "m",
                                  "arg": {
                                    "str": "mmatchIndex"
                                  }
                                },
                                "arg": {
                                  "applyFun": "commitIndex",
                                  "arg": "i"
                                }
                              },
                              {
                                "eq": {
                                  "applyFun": "m",
                                  "arg": {
                                    "str": "mmatchIndex"
                                  }
                                },
                                "arg": {
                                  "applyFun": {
                                    "applyFun": "matchIndex",
                                    "arg": "i"
                                  },
                                  "arg": "j"
                                }
                              }
                            ]
                          },
                          {
                            "ne": {
                              "applyFun": "m",
                              "arg": {
                                "str": "mmatchIndex"
                              }
                            },
                            "arg": {
                              "applyFun": "commitIndex",
                              "arg": "i"
                            }
                          }
                        ]
                      },
                      {
                        "ne": {
                          "applyFun": "state",
                          "arg": "i"
                        },
                        "arg": "Leader"
                      },
                      {
                        "ne": {
                          "applyFun": "m",
                          "arg": {
                            "str": "mterm"
                          }
                        },
                        "arg": {
                          "applyFun": "currentTerm",
                          "arg": "i"
                        }
                      },
                      {
                        "in": "j",
                        "arg": {
                          "applyOp": "GetConfig",
                          "args": [
                            "i"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "applyOp": "Discard",
                    "args": [
                      "m"
                    ]
                  },
                  {
                    "unchanged": {
                      "tuple": [
                        {
                          "applyOp": "leaderVars",
                          "args": [
                            
                          ]
                        }
                      ]
                    }
                  }
                ]
              }
            ]
          },
          {
            "unchanged": {
              "tuple": [
                {
                  "applyOp": "serverVars",
                  "args": [
                    
                  ]
                },
                {
                  "applyOp": "candidateVars",
                  "args": [
                    
                  ]
                },
                {
                  "applyOp": "logVars",
                  "args": [
                    
                  ]
                }
              ]
            }
          }
        ]
      },
      "params": [
        {
          "name": "i",
          "arity": 0
        },
        {
          "name": "j",
          "arity": 0
        },
        {
          "name": "m",
          "arity": 0
        }
      ]
    },
    {
      "operator": "HandleCheckOldConfig",
      "body": {
        "or": [
          {
            "and": [
              {
                "or": [
                  {
                    "ne": {
                      "applyFun": "state",
                      "arg": "i"
                    },
                    "arg": "Leader"
                  },
                  {
                    "eq": {
                      "applyFun": "m",
                      "arg": {
                        "str": "mterm"
                      }
                    },
                    "arg": {
                      "applyFun": "currentTerm",
                      "arg": "i"
                    }
                  }
                ]
              },
              {
                "applyOp": "Discard",
                "args": [
                  "m"
                ]
              },
              {
                "unchanged": {
                  "tuple": [
                    {
                      "applyOp": "serverVars",
                      "args": [
                        
                      ]
                    },
                    {
                      "applyOp": "candidateVars",
                      "args": [
                        
                      ]
                    },
                    {
                      "applyOp": "leaderVars",
                      "args": [
                        
                      ]
                    },
                    {
                      "applyOp": "logVars",
                      "args": [
                        
                      ]
                    }
                  ]
                }
              }
            ]
          },
          {
            "and": [
              {
                "and": [
                  {
                    "eq": {
                      "applyFun": "state",
                      "arg": "i"
                    },
                    "arg": "Leader"
                  },
                  {
                    "eq": {
                      "applyFun": "m",
                      "arg": {
                        "str": "mterm"
                      }
                    },
                    "arg": {
                      "applyFun": "currentTerm",
                      "arg": "i"
                    }
                  }
                ]
              },
              {
                "or": [
                  {
                    "and": [
                      {
                        "le": {
                          "applyOp": "GetMaxConfigIndex",
                          "args": [
                            "i"
                          ]
                        },
                        "arg": {
                          "applyFun": "commitIndex",
                          "arg": "i"
                        }
                      },
                      {
                        "let": [
                          {
                            "operator": "action",
                            "body": {
                              "if": {
                                "applyFun": "m",
                                "arg": {
                                  "str": "madd"
                                }
                              },
                              "then": {
                                "record": [
                                  {
                                    "key": {
                                      "str": "action"
                                    },
                                    "value": {
                                      "str": "AddServer"
                                    }
                                  },
                                  {
                                    "key": {
                                      "str": "executedOn"
                                    },
                                    "value": "i"
                                  },
                                  {
                                    "key": {
                                      "str": "added"
                                    },
                                    "value": {
                                      "applyFun": "m",
                                      "arg": {
                                        "str": "mserver"
                                      }
                                    }
                                  }
                                ]
                              },
                              "else": {
                                "record": [
                                  {
                                    "key": {
                                      "str": "action"
                                    },
                                    "value": {
                                      "str": "RemoveServer"
                                    }
                                  },
                                  {
                                    "key": {
                                      "str": "executedOn"
                                    },
                                    "value": "i"
                                  },
                                  {
                                    "key": {
                                      "str": "removed"
                                    },
                                    "value": {
                                      "applyFun": "m",
                                      "arg": {
                                        "str": "mserver"
                                      }
                                    }
                                  }
                                ]
                              }
                            },
                            "params": [
                              
                            ]
                          },
                          {
                            "operator": "newConfig",
                            "body": {
                              "if": {
                                "applyFun": "m",
                                "arg": {
                                  "str": "madd"
                                }
                              },
                              "then": {
                                "union": {
                                  "enumSet": [
                                    {
                                      "applyOp": "GetConfig",
                                      "args": [
                                        "i"
                                      ]
                                    },
                                    {
                                      "enumSet": [
                                        {
                                          "applyFun": "m",
                                          "arg": {
                                            "str": "mserver"
                                          }
                                        }
                                      ]
                                    }
                                  ]
                                }
                              },
                              "else": {
                                "setminus": {
                                  "applyOp": "GetConfig",
                                  "args": [
                                    "i"
                                  ]
                                },
                                "arg": {
                                  "enumSet": [
                                    {
                                      "applyFun": "m",
                                      "arg": {
                                        "str": "mserver"
                                      }
                                    }
                                  ]
                                }
                              }
                            },
                            "params": [
                              
                            ]
                          },
                          {
                            "operator": "configChanged",
                            "body": {
                              "ne": {
                                "applyOp": "GetConfig",
                                "args": [
                                  "i"
                                ]
                              },
                              "arg": {
                                "applyOp": "newConfig",
                                "args": [
                                  
                                ]
                              }
                            },
                            "params": [
                              
                            ]
                          },
                          {
                            "operator": "newEntry",
                            "body": {
                              "record": [
                                {
                                  "key": {
                                    "str": "term"
                                  },
                                  "value": {
                                    "applyFun": "currentTerm",
                                    "arg": "i"
                                  }
                                },
                                {
                                  "key": {
                                    "str": "type"
                                  },
                                  "value": "ConfigEntry"
                                },
                                {
                                  "key": {
                                    "str": "value"
                                  },
                                  "value": {
                                    "applyOp": "newConfig",
                                    "args": [
                                      
                                    ]
                                  }
                                }
                              ]
                            },
                            "params": [
                              
                            ]
                          },
                          {
                            "operator": "newLog",
                            "body": {
                              "if": {
                                "applyOp": "configChanged",
                                "args": [
                                  
                                ]
                              },
                              "then": true,
                              "else": {
                                "applyFun": "log",
                                "arg": "i"
                              }
                            },
                            "params": [
                              
                            ]
                          }
                        ],
                        "body": {
                          "and": [
                            {
                              "and": [
                                {
                                  "eq": {
                                    "prime": "log"
                                  },
                                  "arg": {
                                    "except": "log",
                                    "where": [
                                      {
                                        "key": {
                                          "tuple": [
                                            "i"
                                          ]
                                        },
                                        "value": {
                                          "applyOp": "newLog",
                                          "args": [
                                            
                                          ]
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "if": {
                                    "applyOp": "configChanged",
                                    "args": [
                                      
                                    ]
                                  },
                                  "then": {
                                    "applyOp": "DiscardWithMembershipChange",
                                    "args": [
                                      "m",
                                      {
                                        "applyOp": "action",
                                        "args": [
                                          
                                        ]
                                      }
                                    ]
                                  },
                                  "else": {
                                    "applyOp": "Discard",
                                    "args": [
                                      "m"
                                    ]
                                  }
                                }
                              ]
                            },
                            {
                              "unchanged": {
                                "tuple": [
                                  "commitIndex"
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "and": [
                      {
                        "gt": {
                          "applyOp": "GetMaxConfigIndex",
                          "args": [
                            "i"
                          ]
                        },
                        "arg": {
                          "applyFun": "commitIndex",
                          "arg": "i"
                        }
                      },
                      {
                        "applyOp": "Reply",
                        "args": [
                          {
                            "record": [
                              {
                                "key": {
                                  "str": "mtype"
                                },
                                "value": "CheckOldConfig"
                              },
                              {
                                "key": {
                                  "str": "mterm"
                                },
                                "value": {
                                  "applyFun": "currentTerm",
                                  "arg": "i"
                                }
                              },
                              {
                                "key": {
                                  "str": "madd"
                                },
                                "value": {
                                  "applyFun": "m",
                                  "arg": {
                                    "str": "madd"
                                  }
                                }
                              },
                              {
                                "key": {
                                  "str": "mserver"
                                },
                                "value": {
                                  "applyFun": "m",
                                  "arg": {
                                    "str": "mserver"
                                  }
                                }
                              },
                              {
                                "key": {
                                  "str": "msource"
                                },
                                "value": "i"
                              },
                              {
                                "key": {
                                  "str": "mdest"
                                },
                                "value": "i"
                              }
                            ]
                          },
                          "m"
                        ]
                      },
                      {
                        "unchanged": {
                          "tuple": [
                            {
                              "applyOp": "logVars",
                              "args": [
                                
                              ]
                            }
                          ]
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "unchanged": {
                  "tuple": [
                    {
                      "applyOp": "serverVars",
                      "args": [
                        
                      ]
                    },
                    {
                      "applyOp": "candidateVars",
                      "args": [
                        
                      ]
                    },
                    {
                      "applyOp": "leaderVars",
                      "args": [
                        
                      ]
                    }
                  ]
                }
              }
            ]
          }
        ]
      },
      "params": [
        {
          "name": "i",
          "arity": 0
        },
        {
          "name": "m",
          "arity": 0
        }
      ]
    },
    {
      "operator": "DropStaleResponse",
      "body": {
        "and": [
          {
            "lt": {
              "applyFun": "m",
              "arg": {
                "str": "mterm"
              }
            },
            "arg": {
              "applyFun": "currentTerm",
              "arg": "i"
            }
          },
          {
            "applyOp": "Discard",
            "args": [
              "m"
            ]
          },
          {
            "unchanged": {
              "tuple": [
                {
                  "applyOp": "serverVars",
                  "args": [
                    
                  ]
                },
                {
                  "applyOp": "candidateVars",
                  "args": [
                    
                  ]
                },
                {
                  "applyOp": "leaderVars",
                  "args": [
                    
                  ]
                },
                {
                  "applyOp": "logVars",
                  "args": [
                    
                  ]
                }
              ]
            }
          }
        ]
      },
      "params": [
        {
          "name": "i",
          "arity": 0
        },
        {
          "name": "j",
          "arity": 0
        },
        {
          "name": "m",
          "arity": 0
        }
      ]
    },
    {
      "operator": "DuplicateMessage",
      "body": {
        "and": [
          {
            "applyOp": "SendWithoutHistory",
            "args": [
              "m"
            ]
          },
          {
            "unchanged": {
              "tuple": [
                {
                  "applyOp": "serverVars",
                  "args": [
                    
                  ]
                },
                {
                  "applyOp": "candidateVars",
                  "args": [
                    
                  ]
                },
                {
                  "applyOp": "leaderVars",
                  "args": [
                    
                  ]
                },
                {
                  "applyOp": "logVars",
                  "args": [
                    
                  ]
                },
                "history"
              ]
            }
          }
        ]
      },
      "params": [
        {
          "name": "m",
          "arity": 0
        }
      ]
    },
    {
      "operator": "DropMessage",
      "body": {
        "and": [
          {
            "applyOp": "DiscardWithoutHistory",
            "args": [
              "m"
            ]
          },
          {
            "unchanged": {
              "tuple": [
                {
                  "applyOp": "serverVars",
                  "args": [
                    
                  ]
                },
                {
                  "applyOp": "candidateVars",
                  "args": [
                    
                  ]
                },
                {
                  "applyOp": "leaderVars",
                  "args": [
                    
                  ]
                },
                {
                  "applyOp": "logVars",
                  "args": [
                    
                  ]
                },
                "history"
              ]
            }
          }
        ]
      },
      "params": [
        {
          "name": "m",
          "arity": 0
        }
      ]
    },
    {
      "operator": "AcceptAppendEntriesRequest",
      "body": {
        "and": [
          {
            "eq": {
              "applyFun": "m",
              "arg": {
                "str": "mterm"
              }
            },
            "arg": {
              "applyFun": "currentTerm",
              "arg": "i"
            }
          },
          {
            "eq": {
              "applyFun": "state",
              "arg": "i"
            },
            "arg": "Follower"
          },
          "logOk",
          {
            "let": [
              {
                "operator": "index",
                "body": {
                  "plus": {
                    "applyFun": "m",
                    "arg": {
                      "str": "mprevLogIndex"
                    }
                  },
                  "arg": 1
                },
                "params": [
                  
                ]
              }
            ],
            "body": {
              "or": [
                {
                  "applyOp": "AppendEntriesAlreadyDone",
                  "args": [
                    "i",
                    "j",
                    {
                      "applyOp": "index",
                      "args": [
                        
                      ]
                    },
                    "m"
                  ]
                },
                {
                  "applyOp": "ConflictAppendEntriesRequest",
                  "args": [
                    "i",
                    {
                      "applyOp": "index",
                      "args": [
                        
                      ]
                    },
                    "m"
                  ]
                },
                {
                  "applyOp": "NoConflictAppendEntriesRequest",
                  "args": [
                    "i",
                    "m"
                  ]
                }
              ]
            }
          }
        ]
      },
      "params": [
        {
          "name": "i",
          "arity": 0
        },
        {
          "name": "j",
          "arity": 0
        },
        {
          "name": "logOk",
          "arity": 0
        },
        {
          "name": "m",
          "arity": 0
        }
      ]
    },
    {
      "operator": "NextUnreliable",
      "body": {
        "or": [
          {
            "existsBounded": {
              "key": "m",
              "value": {
                "domain": "messages"
              }
            },
            "that": {
              "and": [
                {
                  "eq": {
                    "applyFun": "messages",
                    "arg": "m"
                  },
                  "arg": 1
                },
                {
                  "applyOp": "DuplicateMessage",
                  "args": [
                    "m"
                  ]
                }
              ]
            }
          },
          {
            "existsBounded": {
              "key": "m",
              "value": {
                "domain": "messages"
              }
            },
            "that": {
              "and": [
                {
                  "eq": {
                    "applyFun": "messages",
                    "arg": "m"
                  },
                  "arg": 1
                },
                {
                  "applyOp": "DropMessage",
                  "args": [
                    "m"
                  ]
                }
              ]
            }
          }
        ]
      },
      "params": [
        
      ]
    },
    {
      "operator": "HandleAppendEntriesRequest",
      "body": {
        "let": [
          {
            "operator": "logOk",
            "body": {
              "or": [
                {
                  "eq": {
                    "applyFun": "m",
                    "arg": {
                      "str": "mprevLogIndex"
                    }
                  },
                  "arg": 0
                },
                {
                  "and": [
                    {
                      "gt": {
                        "applyFun": "m",
                        "arg": {
                          "str": "mprevLogIndex"
                        }
                      },
                      "arg": 0
                    },
                    {
                      "le": {
                        "applyFun": "m",
                        "arg": {
                          "str": "mprevLogIndex"
                        }
                      },
                      "arg": true
                    },
                    {
                      "eq": {
                        "applyFun": "m",
                        "arg": {
                          "str": "mprevLogTerm"
                        }
                      },
                      "arg": {
                        "applyFun": {
                          "applyFun": {
                            "applyFun": "log",
                            "arg": "i"
                          },
                          "arg": {
                            "applyFun": "m",
                            "arg": {
                              "str": "mprevLogIndex"
                            }
                          }
                        },
                        "arg": {
                          "str": "term"
                        }
                      }
                    }
                  ]
                }
              ]
            },
            "params": [
              
            ]
          }
        ],
        "body": {
          "and": [
            {
              "le": {
                "applyFun": "m",
                "arg": {
                  "str": "mterm"
                }
              },
              "arg": {
                "applyFun": "currentTerm",
                "arg": "i"
              }
            },
            {
              "or": [
                {
                  "applyOp": "RejectAppendEntriesRequest",
                  "args": [
                    "i",
                    "j",
                    "m",
                    {
                      "applyOp": "logOk",
                      "args": [
                        
                      ]
                    }
                  ]
                },
                {
                  "applyOp": "ReturnToFollowerState",
                  "args": [
                    "i",
                    "m"
                  ]
                },
                {
                  "applyOp": "AcceptAppendEntriesRequest",
                  "args": [
                    "i",
                    "j",
                    {
                      "applyOp": "logOk",
                      "args": [
                        
                      ]
                    },
                    "m"
                  ]
                }
              ]
            },
            {
              "unchanged": {
                "tuple": [
                  {
                    "applyOp": "candidateVars",
                    "args": [
                      
                    ]
                  },
                  {
                    "applyOp": "leaderVars",
                    "args": [
                      
                    ]
                  }
                ]
              }
            }
          ]
        }
      },
      "params": [
        {
          "name": "i",
          "arity": 0
        },
        {
          "name": "j",
          "arity": 0
        },
        {
          "name": "m",
          "arity": 0
        }
      ]
    },
    {
      "operator": "ReceiveDirect",
      "body": {
        "let": [
          {
            "operator": "i",
            "body": {
              "applyFun": "m",
              "arg": {
                "str": "mdest"
              }
            },
            "params": [
              
            ]
          },
          {
            "operator": "j",
            "body": {
              "applyFun": "m",
              "arg": {
                "str": "msource"
              }
            },
            "params": [
              
            ]
          }
        ],
        "body": {
          "or": [
            {
              "applyOp": "UpdateTerm",
              "args": [
                {
                  "applyOp": "i",
                  "args": [
                    
                  ]
                },
                {
                  "applyOp": "j",
                  "args": [
                    
                  ]
                },
                "m"
              ]
            },
            {
              "and": [
                {
                  "eq": {
                    "applyFun": "m",
                    "arg": {
                      "str": "mtype"
                    }
                  },
                  "arg": "RequestVoteRequest"
                },
                {
                  "applyOp": "HandleRequestVoteRequest",
                  "args": [
                    {
                      "applyOp": "i",
                      "args": [
                        
                      ]
                    },
                    {
                      "applyOp": "j",
                      "args": [
                        
                      ]
                    },
                    "m"
                  ]
                }
              ]
            },
            {
              "and": [
                {
                  "eq": {
                    "applyFun": "m",
                    "arg": {
                      "str": "mtype"
                    }
                  },
                  "arg": "RequestVoteResponse"
                },
                {
                  "or": [
                    {
                      "applyOp": "DropStaleResponse",
                      "args": [
                        {
                          "applyOp": "i",
                          "args": [
                            
                          ]
                        },
                        {
                          "applyOp": "j",
                          "args": [
                            
                          ]
                        },
                        "m"
                      ]
                    },
                    {
                      "applyOp": "HandleRequestVoteResponse",
                      "args": [
                        {
                          "applyOp": "i",
                          "args": [
                            
                          ]
                        },
                        {
                          "applyOp": "j",
                          "args": [
                            
                          ]
                        },
                        "m"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "and": [
                {
                  "eq": {
                    "applyFun": "m",
                    "arg": {
                      "str": "mtype"
                    }
                  },
                  "arg": "AppendEntriesRequest"
                },
                {
                  "applyOp": "HandleAppendEntriesRequest",
                  "args": [
                    {
                      "applyOp": "i",
                      "args": [
                        
                      ]
                    },
                    {
                      "applyOp": "j",
                      "args": [
                        
                      ]
                    },
                    "m"
                  ]
                }
              ]
            },
            {
              "and": [
                {
                  "eq": {
                    "applyFun": "m",
                    "arg": {
                      "str": "mtype"
                    }
                  },
                  "arg": "AppendEntriesResponse"
                },
                {
                  "or": [
                    {
                      "applyOp": "DropStaleResponse",
                      "args": [
                        {
                          "applyOp": "i",
                          "args": [
                            
                          ]
                        },
                        {
                          "applyOp": "j",
                          "args": [
                            
                          ]
                        },
                        "m"
                      ]
                    },
                    {
                      "applyOp": "HandleAppendEntriesResponse",
                      "args": [
                        {
                          "applyOp": "i",
                          "args": [
                            
                          ]
                        },
                        {
                          "applyOp": "j",
                          "args": [
                            
                          ]
                        },
                        "m"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "and": [
                {
                  "eq": {
                    "applyFun": "m",
                    "arg": {
                      "str": "mtype"
                    }
                  },
                  "arg": "CatchupRequest"
                },
                {
                  "applyOp": "HandleCatchupRequest",
                  "args": [
                    {
                      "applyOp": "i",
                      "args": [
                        
                      ]
                    },
                    {
                      "applyOp": "j",
                      "args": [
                        
                      ]
                    },
                    "m"
                  ]
                }
              ]
            },
            {
              "and": [
                {
                  "eq": {
                    "applyFun": "m",
                    "arg": {
                      "str": "mtype"
                    }
                  },
                  "arg": "CatchupResponse"
                },
                {
                  "applyOp": "HandleCatchupResponse",
                  "args": [
                    {
                      "applyOp": "i",
                      "args": [
                        
                      ]
                    },
                    {
                      "applyOp": "j",
                      "args": [
                        
                      ]
                    },
                    "m"
                  ]
                }
              ]
            },
            {
              "and": [
                {
                  "eq": {
                    "applyFun": "m",
                    "arg": {
                      "str": "mtype"
                    }
                  },
                  "arg": "CheckOldConfig"
                },
                {
                  "applyOp": "HandleCheckOldConfig",
                  "args": [
                    {
                      "applyOp": "i",
                      "args": [
                        
                      ]
                    },
                    "m"
                  ]
                }
              ]
            }
          ]
        }
      },
      "params": [
        {
          "name": "m",
          "arity": 0
        }
      ]
    },
    {
      "operator": "ReceiveWrapped",
      "body": {
        "let": [
          {
            "operator": "i",
            "body": {
              "applyFun": "m",
              "arg": {
                "str": "mdest"
              }
            },
            "params": [
              
            ]
          },
          {
            "operator": "j",
            "body": {
              "applyFun": "m",
              "arg": {
                "str": "msource"
              }
            },
            "params": [
              
            ]
          }
        ],
        "body": {
          "or": [
            {
              "applyOp": "UpdateTerm",
              "args": [
                {
                  "applyOp": "i",
                  "args": [
                    
                  ]
                },
                {
                  "applyOp": "j",
                  "args": [
                    
                  ]
                },
                "m"
              ]
            },
            {
              "and": [
                {
                  "eq": {
                    "applyFun": "m",
                    "arg": {
                      "str": "mtype"
                    }
                  },
                  "arg": "RequestVoteRequest"
                },
                {
                  "applyOp": "HandleRequestVoteRequest",
                  "args": [
                    {
                      "applyOp": "i",
                      "args": [
                        
                      ]
                    },
                    {
                      "applyOp": "j",
                      "args": [
                        
                      ]
                    },
                    {
                      "applyFun": "m",
                      "arg": {
                        "str": "RVReq"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "and": [
                {
                  "eq": {
                    "applyFun": "m",
                    "arg": {
                      "str": "mtype"
                    }
                  },
                  "arg": "RequestVoteResponse"
                },
                {
                  "or": [
                    {
                      "applyOp": "DropStaleResponse",
                      "args": [
                        {
                          "applyOp": "i",
                          "args": [
                            
                          ]
                        },
                        {
                          "applyOp": "j",
                          "args": [
                            
                          ]
                        },
                        {
                          "applyFun": "m",
                          "arg": {
                            "str": "RVResp"
                          }
                        }
                      ]
                    },
                    {
                      "applyOp": "HandleRequestVoteResponse",
                      "args": [
                        {
                          "applyOp": "i",
                          "args": [
                            
                          ]
                        },
                        {
                          "applyOp": "j",
                          "args": [
                            
                          ]
                        },
                        {
                          "applyFun": "m",
                          "arg": {
                            "str": "RVResp"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "and": [
                {
                  "eq": {
                    "applyFun": "m",
                    "arg": {
                      "str": "mtype"
                    }
                  },
                  "arg": "AppendEntriesRequest"
                },
                {
                  "applyOp": "HandleAppendEntriesRequest",
                  "args": [
                    {
                      "applyOp": "i",
                      "args": [
                        
                      ]
                    },
                    {
                      "applyOp": "j",
                      "args": [
                        
                      ]
                    },
                    {
                      "applyFun": "m",
                      "arg": {
                        "str": "AEReq"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "and": [
                {
                  "eq": {
                    "applyFun": "m",
                    "arg": {
                      "str": "mtype"
                    }
                  },
                  "arg": "AppendEntriesResponse"
                },
                {
                  "or": [
                    {
                      "applyOp": "DropStaleResponse",
                      "args": [
                        {
                          "applyOp": "i",
                          "args": [
                            
                          ]
                        },
                        {
                          "applyOp": "j",
                          "args": [
                            
                          ]
                        },
                        {
                          "applyFun": "m",
                          "arg": {
                            "str": "AEResp"
                          }
                        }
                      ]
                    },
                    {
                      "applyOp": "HandleAppendEntriesResponse",
                      "args": [
                        {
                          "applyOp": "i",
                          "args": [
                            
                          ]
                        },
                        {
                          "applyOp": "j",
                          "args": [
                            
                          ]
                        },
                        {
                          "applyFun": "m",
                          "arg": {
                            "str": "AEResp"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      },
      "params": [
        {
          "name": "m",
          "arity": 0
        }
      ]
    },
    {
      "operator": "Receive",
      "body": {
        "applyOp": "ReceiveDirect",
        "args": [
          "m"
        ]
      },
      "params": [
        {
          "name": "m",
          "arity": 0
        }
      ]
    },
    {
      "operator": "NextAsync",
      "body": {
        "or": [
          {
            "existsBounded": {
              "key": "i",
              "value": "Server"
            },
            "that": {
              "existsBounded": {
                "key": "j",
                "value": "Server"
              },
              "that": {
                "applyOp": "RequestVote",
                "args": [
                  "i",
                  "j"
                ]
              }
            }
          },
          {
            "existsBounded": {
              "key": "i",
              "value": "Server"
            },
            "that": {
              "applyOp": "BecomeLeader",
              "args": [
                "i"
              ]
            }
          },
          {
            "existsBounded": {
              "key": "i",
              "value": "Server"
            },
            "that": {
              "existsBounded": {
                "key": "v",
                "value": "Value"
              },
              "that": {
                "applyOp": "ClientRequest",
                "args": [
                  "i",
                  "v"
                ]
              }
            }
          },
          {
            "existsBounded": {
              "key": "i",
              "value": "Server"
            },
            "that": {
              "applyOp": "AdvanceCommitIndex",
              "args": [
                "i"
              ]
            }
          },
          {
            "existsBounded": {
              "key": "i",
              "value": "Server"
            },
            "that": {
              "existsBounded": {
                "key": "j",
                "value": "Server"
              },
              "that": {
                "applyOp": "AppendEntries",
                "args": [
                  "i",
                  "j"
                ]
              }
            }
          },
          {
            "existsBounded": {
              "key": "m",
              "value": {
                "domain": "messages"
              }
            },
            "that": {
              "applyOp": "Receive",
              "args": [
                "m"
              ]
            }
          },
          {
            "existsBounded": {
              "key": "i",
              "value": "Server"
            },
            "that": {
              "applyOp": "Timeout",
              "args": [
                "i"
              ]
            }
          }
        ]
      },
      "params": [
        
      ]
    },
    {
      "operator": "NextAsyncCrash",
      "body": {
        "or": [
          {
            "applyOp": "NextAsync",
            "args": [
              
            ]
          },
          {
            "applyOp": "NextCrash",
            "args": [
              
            ]
          }
        ]
      },
      "params": [
        
      ]
    },
    {
      "operator": "Next",
      "body": {
        "or": [
          {
            "applyOp": "NextAsync",
            "args": [
              
            ]
          },
          {
            "applyOp": "NextCrash",
            "args": [
              
            ]
          },
          {
            "applyOp": "NextUnreliable",
            "args": [
              
            ]
          }
        ]
      },
      "params": [
        
      ]
    },
    {
      "operator": "NextDynamic",
      "body": {
        "or": [
          {
            "applyOp": "Next",
            "args": [
              
            ]
          },
          {
            "existsBounded": {
              "key": "i",
              "value": "Server"
            },
            "that": {
              "existsBounded": {
                "key": "j",
                "value": "Server"
              },
              "that": {
                "applyOp": "AddNewServer",
                "args": [
                  "i",
                  "j"
                ]
              }
            }
          },
          {
            "existsBounded": {
              "key": "i",
              "value": "Server"
            },
            "that": {
              "existsBounded": {
                "key": "j",
                "value": "Server"
              },
              "that": {
                "applyOp": "DeleteServer",
                "args": [
                  "i",
                  "j"
                ]
              }
            }
          }
        ]
      },
      "params": [
        
      ]
    },
    {
      "operator": "Spec",
      "body": {
        "and": [
          {
            "applyOp": "Init",
            "args": [
              
            ]
          },
          {
            "box": {
              "stutter": {
                "applyOp": "Next",
                "args": [
                  
                ]
              },
              "vars": {
                "applyOp": "vars",
                "args": [
                  
                ]
              }
            }
          }
        ]
      },
      "params": [
        
      ]
    }
  ]
}