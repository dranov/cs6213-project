@article{Davis_2020,
   title={Extreme modelling in practice},
   volume={13},
   ISSN={2150-8097},
   url={http://dx.doi.org/10.14778/3397230.3397233},
   DOI={10.14778/3397230.3397233},
   number={9},
   journal={Proceedings of the VLDB Endowment},
   publisher={VLDB Endowment},
   author={Davis, A. Jesse Jiryu and Hirschhorn, Max and Schvimer, Judah},
   year={2020},
   month={May},
   pages={1346–1358}
}

@article{lipton1975reduction,
  title={Reduction: A method of proving properties of parallel programs},
  author={Lipton, Richard J},
  journal={Communications of the ACM},
  volume={18},
  number={12},
  pages={717--721},
  year={1975},
  publisher={ACM New York, NY, USA}
}

@article{newcombe_how_2015,
	title = {How {Amazon} web services uses formal methods},
	volume = {58},
	issn = {0001-0782, 1557-7317},
	url = {https://dl.acm.org/doi/10.1145/2699417},
	language = {en},
	number = {4},
	urldate = {2021-01-11},
	journal = {Communications of the ACM},
	author = {Newcombe, Chris and Rath, Tim and Zhang, Fan and Munteanu, Bogdan and Brooker, Marc and Deardeuff, Michael},
	month = mar,
	year = {2015},
	pages = {66--73},
}

@inproceedings{ongaro_search_2014,
	title = {In search of an understandable consensus algorithm},
	booktitle = {{USENIX} {Annual} {Technical} {Conference}},
	author = {Ongaro, Diego and Ousterhout, John K.},
	year = {2014},
	note = {00416},
	keywords = {Raft},
	pages = {305--319},
	file = {Ongaro and Ousterhout - In Search of an Understandable Consensus Algorithm.pdf:C\:\\Users\\georg\\Zotero\\storage\\YAFGE7RB\\Ongaro and Ousterhout - In Search of an Understandable Consensus Algorithm.pdf:application/pdf},
}

@phdthesis{ongaro_consensus_2014,
	title = {Consensus: {Bridging} {Theory} and {Practice}},
	url = {https://purl.stanford.edu/qr033xr6097},
	school = {Stanford University},
	author = {Ongaro, Diego},
	month = aug,
	year = {2014},
	file = {Ongaro - Consensus Bridging Theory and Practice.pdf:C\:\\Users\\georg\\Zotero\\storage\\L9RCKX7Z\\Ongaro - Consensus Bridging Theory and Practice.pdf:application/pdf},
}

@article{amos201515,
  title={15-812 Term Paper: Specifying and proving cluster membership for the Raft distributed consensus algorithm},
  author={Amos, Brandon and Zhang, Huanchen},
  year={2015}
}

@inproceedings{fonseca2017empirical,
  title={An empirical study on the correctness of formally verified distributed systems},
  author={Fonseca, Pedro and Zhang, Kaiyuan and Wang, Xi and Krishnamurthy, Arvind},
  booktitle={Proceedings of the Twelfth European Conference on Computer Systems},
  pages={328--343},
  year={2017}
}


@misc{howard_raft_2020,
	title = {Raft does not {Guarantee} {Liveness} in the face of {Network} {Faults}},
	url = {https://decentralizedthoughts.github.io/2020-12-12-raft-liveness-full-omission/},
	abstract = {Last month, Cloudflare published a postmortem of a recent 6-hour outage caused by a partial switch failure which left etcd unavailable as it was unable to establish a stable leader. This outage has understandably led to discussion online about exactly what liveness guarantees are provided by the Raft consensus algorithm...},
	language = {en},
	urldate = {2021-05-07},
	author = {Howard, Heidi and Abraham, Ittai},
	month = dec,
	year = {2020},
}


@article{konnov_tla+_2019,
	title = {{TLA}+ model checking made symbolic},
	volume = {3},
	issn = {24751421},
	url = {http://dl.acm.org/citation.cfm?doid=3366395.3360549},
	doi = {10.1145/3360549},
	abstract = {IGOR KONNOV, Inria, LORIA, University of Lorraine, CNRS, Nancy, France JURE KUKOVEC and THANH-HAI TRAN, TU Wien, Austria TLA+ is a language for formal specification of all kinds of computer systems. System designers use this language to specify concurrent, distributed, and fault-tolerant protocols, which are traditionally presented in pseudo-code. TLA+ is extremely concise yet expressive: The language primitives include Booleans, integers, functions, tuples, records, sequences, and sets thereof, which can be also nested. This is probably why the only model checker for TLA+ (called TLC) relies on explicit enumeration of values and states. In this paper, we present APALACHE Ð a first symbolic model checker for TLA+. Like TLC, it assumes that all specification parameters are fixed and all states are finite structures. Unlike TLC, APALACHE translates the underlying transition relation into quantifier-free SMT constraints, which allows us to exploit the power of SMT solvers. Designing this translation is the central challenge that we address in this paper. Our experiments show that APALACHE outperforms TLC on examples with large state spaces. CCS Concepts: • Theory of computation → Logic and verification; • Software and its engineering → Model checking; Specification languages.},
	language = {en},
	number = {OOPSLA},
	urldate = {2019-11-29},
	journal = {Proceedings of the ACM on Programming Languages},
	author = {Konnov, Igor and Kukovec, Jure and Tran, Thanh-Hai},
	month = oct,
	year = {2019},
	note = {00001},
	pages = {1--30},
}

@phdthesis{mcmillan_symbolic_1992,
	title = {Symbolic {Model} {Checking}: {An} approach to the state explosion problem},
	language = {en},
	author = {McMillan, Kenneth L},
	year = {1992},
}
