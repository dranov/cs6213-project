TLC2 Version 2.16 of 31 December 2020 (rev: cdddf55)
Running breadth-first search Model-Checking with fp 69 and seed -7897426432390540909 with 8 workers on 8 cores with 3641MB heap and 64MB offheap memory [pid: 56531] (Mac OS X 10.16 x86_64, N/A 14.0.1 x86_64, MSBDiskFPSet, DiskStateQueue).
Parsing file /Users/darius/Downloads/cs6213-project/tla/raft.tla
Parsing file /private/var/folders/l6/290h50ys7t995mrks71zd9zc0000gn/T/Naturals.tla
Parsing file /private/var/folders/l6/290h50ys7t995mrks71zd9zc0000gn/T/Integers.tla
Parsing file /Users/darius/Downloads/cs6213-project/tla/TypedBags.tla
Parsing file /private/var/folders/l6/290h50ys7t995mrks71zd9zc0000gn/T/FiniteSets.tla
Parsing file /private/var/folders/l6/290h50ys7t995mrks71zd9zc0000gn/T/Sequences.tla
Parsing file /Users/darius/Downloads/cs6213-project/tla/SequencesExt.tla
Parsing file /private/var/folders/l6/290h50ys7t995mrks71zd9zc0000gn/T/TLC.tla
Parsing file /Users/darius/Downloads/cs6213-project/tla/FiniteSetsExt.tla
Parsing file /Users/darius/Downloads/cs6213-project/tla/Functions.tla
Semantic processing of module Naturals
Semantic processing of module Integers
Semantic processing of module Sequences
Semantic processing of module FiniteSets
Semantic processing of module TLC
Semantic processing of module TypedBags
Semantic processing of module Functions
Semantic processing of module FiniteSetsExt
Semantic processing of module SequencesExt
Semantic processing of module raft
Starting... (2021-05-05 23:40:16)
Computing initial states...
Finished computing initial states: 1 distinct state generated at 2021-05-05 23:40:16.
Error: Invariant FirstBecomeLeader is violated.
Error: The behavior up to this point is:
State 1: <Initial predicate>
/\ history = [ server |->
      ( s1 :> [restarted |-> 0, timeout |-> 0] @@
        s2 :> [restarted |-> 0, timeout |-> 0] @@
        s3 :> [restarted |-> 0, timeout |-> 0] ),
  global |-> <<>>,
  hadNumLeaders |-> 0,
  hadNumClientRequests |-> 0,
  hadNumTriedMembershipChanges |-> 0,
  hadNumMembershipChanges |-> 0 ]
/\ votesResponded = (s1 :> {} @@ s2 :> {} @@ s3 :> {})
/\ nextIndex = ( s1 :> (s1 :> 1 @@ s2 :> 1 @@ s3 :> 1) @@
  s2 :> (s1 :> 1 @@ s2 :> 1 @@ s3 :> 1) @@
  s3 :> (s1 :> 1 @@ s2 :> 1 @@ s3 :> 1) )
/\ currentTerm = (s1 :> 1 @@ s2 :> 1 @@ s3 :> 1)
/\ votedFor = (s1 :> 0 @@ s2 :> 0 @@ s3 :> 0)
/\ matchIndex = ( s1 :> (s1 :> 0 @@ s2 :> 0 @@ s3 :> 0) @@
  s2 :> (s1 :> 0 @@ s2 :> 0 @@ s3 :> 0) @@
  s3 :> (s1 :> 0 @@ s2 :> 0 @@ s3 :> 0) )
/\ commitIndex = (s1 :> 0 @@ s2 :> 0 @@ s3 :> 0)
/\ state = (s1 :> "Follower" @@ s2 :> "Follower" @@ s3 :> "Follower")
/\ messages = << >>
/\ log = (s1 :> <<>> @@ s2 :> <<>> @@ s3 :> <<>>)
/\ votesGranted = (s1 :> {} @@ s2 :> {} @@ s3 :> {})

State 2: <Timeout line 413, col 15 to line 425, col 60 of module raft>
/\ history = [ server |->
      ( s1 :> [restarted |-> 0, timeout |-> 1] @@
        s2 :> [restarted |-> 0, timeout |-> 0] @@
        s3 :> [restarted |-> 0, timeout |-> 0] ),
  global |-> <<[action |-> "Timeout", executedOn |-> s1]>>,
  hadNumLeaders |-> 0,
  hadNumClientRequests |-> 0,
  hadNumTriedMembershipChanges |-> 0,
  hadNumMembershipChanges |-> 0 ]
/\ votesResponded = (s1 :> {} @@ s2 :> {} @@ s3 :> {})
/\ nextIndex = ( s1 :> (s1 :> 1 @@ s2 :> 1 @@ s3 :> 1) @@
  s2 :> (s1 :> 1 @@ s2 :> 1 @@ s3 :> 1) @@
  s3 :> (s1 :> 1 @@ s2 :> 1 @@ s3 :> 1) )
/\ currentTerm = (s1 :> 2 @@ s2 :> 1 @@ s3 :> 1)
/\ votedFor = (s1 :> 0 @@ s2 :> 0 @@ s3 :> 0)
/\ matchIndex = ( s1 :> (s1 :> 0 @@ s2 :> 0 @@ s3 :> 0) @@
  s2 :> (s1 :> 0 @@ s2 :> 0 @@ s3 :> 0) @@
  s3 :> (s1 :> 0 @@ s2 :> 0 @@ s3 :> 0) )
/\ commitIndex = (s1 :> 0 @@ s2 :> 0 @@ s3 :> 0)
/\ state = (s1 :> "Candidate" @@ s2 :> "Follower" @@ s3 :> "Follower")
/\ messages = << >>
/\ log = (s1 :> <<>> @@ s2 :> <<>> @@ s3 :> <<>>)
/\ votesGranted = (s1 :> {} @@ s2 :> {} @@ s3 :> {})

State 3: <RequestVote line 430, col 5 to line 438, col 67 of module raft>
/\ history = [ server |->
      ( s1 :> [restarted |-> 0, timeout |-> 1] @@
        s2 :> [restarted |-> 0, timeout |-> 0] @@
        s3 :> [restarted |-> 0, timeout |-> 0] ),
  global |->
      << [action |-> "Timeout", executedOn |-> s1],
         [ action |-> "Send",
           executedOn |-> s1,
           msg |->
               [ mtype |-> "RequestVoteRequest",
                 mterm |-> 2,
                 mlastLogTerm |-> 0,
                 mlastLogIndex |-> 0,
                 msource |-> s1,
                 mdest |-> s1 ] ] >>,
  hadNumLeaders |-> 0,
  hadNumClientRequests |-> 0,
  hadNumTriedMembershipChanges |-> 0,
  hadNumMembershipChanges |-> 0 ]
/\ votesResponded = (s1 :> {} @@ s2 :> {} @@ s3 :> {})
/\ nextIndex = ( s1 :> (s1 :> 1 @@ s2 :> 1 @@ s3 :> 1) @@
  s2 :> (s1 :> 1 @@ s2 :> 1 @@ s3 :> 1) @@
  s3 :> (s1 :> 1 @@ s2 :> 1 @@ s3 :> 1) )
/\ currentTerm = (s1 :> 2 @@ s2 :> 1 @@ s3 :> 1)
/\ votedFor = (s1 :> 0 @@ s2 :> 0 @@ s3 :> 0)
/\ matchIndex = ( s1 :> (s1 :> 0 @@ s2 :> 0 @@ s3 :> 0) @@
  s2 :> (s1 :> 0 @@ s2 :> 0 @@ s3 :> 0) @@
  s3 :> (s1 :> 0 @@ s2 :> 0 @@ s3 :> 0) )
/\ commitIndex = (s1 :> 0 @@ s2 :> 0 @@ s3 :> 0)
/\ state = (s1 :> "Candidate" @@ s2 :> "Follower" @@ s3 :> "Follower")
/\ messages = ( [ mtype |-> "RequestVoteRequest",
    mterm |-> 2,
    mlastLogTerm |-> 0,
    mlastLogIndex |-> 0,
    msource |-> s1,
    mdest |-> s1 ] :>
      1 )
/\ log = (s1 :> <<>> @@ s2 :> <<>> @@ s3 :> <<>>)
/\ votesGranted = (s1 :> {} @@ s2 :> {} @@ s3 :> {})

State 4: <RequestVote line 430, col 5 to line 438, col 67 of module raft>
/\ history = [ server |->
      ( s1 :> [restarted |-> 0, timeout |-> 1] @@
        s2 :> [restarted |-> 0, timeout |-> 0] @@
        s3 :> [restarted |-> 0, timeout |-> 0] ),
  global |->
      << [action |-> "Timeout", executedOn |-> s1],
         [ action |-> "Send",
           executedOn |-> s1,
           msg |->
               [ mtype |-> "RequestVoteRequest",
                 mterm |-> 2,
                 mlastLogTerm |-> 0,
                 mlastLogIndex |-> 0,
                 msource |-> s1,
                 mdest |-> s1 ] ],
         [ action |-> "Send",
           executedOn |-> s1,
           msg |->
               [ mtype |-> "RequestVoteRequest",
                 mterm |-> 2,
                 mlastLogTerm |-> 0,
                 mlastLogIndex |-> 0,
                 msource |-> s1,
                 mdest |-> s2 ] ] >>,
  hadNumLeaders |-> 0,
  hadNumClientRequests |-> 0,
  hadNumTriedMembershipChanges |-> 0,
  hadNumMembershipChanges |-> 0 ]
/\ votesResponded = (s1 :> {} @@ s2 :> {} @@ s3 :> {})
/\ nextIndex = ( s1 :> (s1 :> 1 @@ s2 :> 1 @@ s3 :> 1) @@
  s2 :> (s1 :> 1 @@ s2 :> 1 @@ s3 :> 1) @@
  s3 :> (s1 :> 1 @@ s2 :> 1 @@ s3 :> 1) )
/\ currentTerm = (s1 :> 2 @@ s2 :> 1 @@ s3 :> 1)
/\ votedFor = (s1 :> 0 @@ s2 :> 0 @@ s3 :> 0)
/\ matchIndex = ( s1 :> (s1 :> 0 @@ s2 :> 0 @@ s3 :> 0) @@
  s2 :> (s1 :> 0 @@ s2 :> 0 @@ s3 :> 0) @@
  s3 :> (s1 :> 0 @@ s2 :> 0 @@ s3 :> 0) )
/\ commitIndex = (s1 :> 0 @@ s2 :> 0 @@ s3 :> 0)
/\ state = (s1 :> "Candidate" @@ s2 :> "Follower" @@ s3 :> "Follower")
/\ messages = ( [ mtype |-> "RequestVoteRequest",
    mterm |-> 2,
    mlastLogTerm |-> 0,
    mlastLogIndex |-> 0,
    msource |-> s1,
    mdest |-> s1 ] :>
      1 @@
  [ mtype |-> "RequestVoteRequest",
    mterm |-> 2,
    mlastLogTerm |-> 0,
    mlastLogIndex |-> 0,
    msource |-> s1,
    mdest |-> s2 ] :>
      1 )
/\ log = (s1 :> <<>> @@ s2 :> <<>> @@ s3 :> <<>>)
/\ votesGranted = (s1 :> {} @@ s2 :> {} @@ s3 :> {})

State 5: <NextAsync line 913, col 8 to line 913, col 44 of module raft>
/\ history = [ server |->
      ( s1 :> [restarted |-> 0, timeout |-> 1] @@
        s2 :> [restarted |-> 0, timeout |-> 0] @@
        s3 :> [restarted |-> 0, timeout |-> 0] ),
  global |->
      << [action |-> "Timeout", executedOn |-> s1],
         [ action |-> "Send",
           executedOn |-> s1,
           msg |->
               [ mtype |-> "RequestVoteRequest",
                 mterm |-> 2,
                 mlastLogTerm |-> 0,
                 mlastLogIndex |-> 0,
                 msource |-> s1,
                 mdest |-> s1 ] ],
         [ action |-> "Send",
           executedOn |-> s1,
           msg |->
               [ mtype |-> "RequestVoteRequest",
                 mterm |-> 2,
                 mlastLogTerm |-> 0,
                 mlastLogIndex |-> 0,
                 msource |-> s1,
                 mdest |-> s2 ] ],
         [ action |-> "Receive",
           executedOn |-> s1,
           msg |->
               [ mtype |-> "RequestVoteRequest",
                 mterm |-> 2,
                 mlastLogTerm |-> 0,
                 mlastLogIndex |-> 0,
                 msource |-> s1,
                 mdest |-> s1 ] ],
         [ action |-> "Send",
           executedOn |-> s1,
           msg |->
               [ mtype |-> "RequestVoteResponse",
                 mterm |-> 2,
                 msource |-> s1,
                 mdest |-> s1,
                 mvoteGranted |-> TRUE,
                 mlog |-> <<>> ] ] >>,
  hadNumLeaders |-> 0,
  hadNumClientRequests |-> 0,
  hadNumTriedMembershipChanges |-> 0,
  hadNumMembershipChanges |-> 0 ]
/\ votesResponded = (s1 :> {} @@ s2 :> {} @@ s3 :> {})
/\ nextIndex = ( s1 :> (s1 :> 1 @@ s2 :> 1 @@ s3 :> 1) @@
  s2 :> (s1 :> 1 @@ s2 :> 1 @@ s3 :> 1) @@
  s3 :> (s1 :> 1 @@ s2 :> 1 @@ s3 :> 1) )
/\ currentTerm = (s1 :> 2 @@ s2 :> 1 @@ s3 :> 1)
/\ votedFor = (s1 :> s1 @@ s2 :> 0 @@ s3 :> 0)
/\ matchIndex = ( s1 :> (s1 :> 0 @@ s2 :> 0 @@ s3 :> 0) @@
  s2 :> (s1 :> 0 @@ s2 :> 0 @@ s3 :> 0) @@
  s3 :> (s1 :> 0 @@ s2 :> 0 @@ s3 :> 0) )
/\ commitIndex = (s1 :> 0 @@ s2 :> 0 @@ s3 :> 0)
/\ state = (s1 :> "Candidate" @@ s2 :> "Follower" @@ s3 :> "Follower")
/\ messages = ( [ mtype |-> "RequestVoteRequest",
    mterm |-> 2,
    mlastLogTerm |-> 0,
    mlastLogIndex |-> 0,
    msource |-> s1,
    mdest |-> s2 ] :>
      1 @@
  [ mtype |-> "RequestVoteResponse",
    mterm |-> 2,
    msource |-> s1,
    mdest |-> s1,
    mvoteGranted |-> TRUE,
    mlog |-> <<>> ] :>
      1 )
/\ log = (s1 :> <<>> @@ s2 :> <<>> @@ s3 :> <<>>)
/\ votesGranted = (s1 :> {} @@ s2 :> {} @@ s3 :> {})

State 6: <NextAsync line 913, col 8 to line 913, col 44 of module raft>
/\ history = [ server |->
      ( s1 :> [restarted |-> 0, timeout |-> 1] @@
        s2 :> [restarted |-> 0, timeout |-> 0] @@
        s3 :> [restarted |-> 0, timeout |-> 0] ),
  global |->
      << [action |-> "Timeout", executedOn |-> s1],
         [ action |-> "Send",
           executedOn |-> s1,
           msg |->
               [ mtype |-> "RequestVoteRequest",
                 mterm |-> 2,
                 mlastLogTerm |-> 0,
                 mlastLogIndex |-> 0,
                 msource |-> s1,
                 mdest |-> s1 ] ],
         [ action |-> "Send",
           executedOn |-> s1,
           msg |->
               [ mtype |-> "RequestVoteRequest",
                 mterm |-> 2,
                 mlastLogTerm |-> 0,
                 mlastLogIndex |-> 0,
                 msource |-> s1,
                 mdest |-> s2 ] ],
         [ action |-> "Receive",
           executedOn |-> s1,
           msg |->
               [ mtype |-> "RequestVoteRequest",
                 mterm |-> 2,
                 mlastLogTerm |-> 0,
                 mlastLogIndex |-> 0,
                 msource |-> s1,
                 mdest |-> s1 ] ],
         [ action |-> "Send",
           executedOn |-> s1,
           msg |->
               [ mtype |-> "RequestVoteResponse",
                 mterm |-> 2,
                 msource |-> s1,
                 mdest |-> s1,
                 mvoteGranted |-> TRUE,
                 mlog |-> <<>> ] ] >>,
  hadNumLeaders |-> 0,
  hadNumClientRequests |-> 0,
  hadNumTriedMembershipChanges |-> 0,
  hadNumMembershipChanges |-> 0 ]
/\ votesResponded = (s1 :> {} @@ s2 :> {} @@ s3 :> {})
/\ nextIndex = ( s1 :> (s1 :> 1 @@ s2 :> 1 @@ s3 :> 1) @@
  s2 :> (s1 :> 1 @@ s2 :> 1 @@ s3 :> 1) @@
  s3 :> (s1 :> 1 @@ s2 :> 1 @@ s3 :> 1) )
/\ currentTerm = (s1 :> 2 @@ s2 :> 2 @@ s3 :> 1)
/\ votedFor = (s1 :> s1 @@ s2 :> 0 @@ s3 :> 0)
/\ matchIndex = ( s1 :> (s1 :> 0 @@ s2 :> 0 @@ s3 :> 0) @@
  s2 :> (s1 :> 0 @@ s2 :> 0 @@ s3 :> 0) @@
  s3 :> (s1 :> 0 @@ s2 :> 0 @@ s3 :> 0) )
/\ commitIndex = (s1 :> 0 @@ s2 :> 0 @@ s3 :> 0)
/\ state = (s1 :> "Candidate" @@ s2 :> "Follower" @@ s3 :> "Follower")
/\ messages = ( [ mtype |-> "RequestVoteRequest",
    mterm |-> 2,
    mlastLogTerm |-> 0,
    mlastLogIndex |-> 0,
    msource |-> s1,
    mdest |-> s2 ] :>
      1 @@
  [ mtype |-> "RequestVoteResponse",
    mterm |-> 2,
    msource |-> s1,
    mdest |-> s1,
    mvoteGranted |-> TRUE,
    mlog |-> <<>> ] :>
      1 )
/\ log = (s1 :> <<>> @@ s2 :> <<>> @@ s3 :> <<>>)
/\ votesGranted = (s1 :> {} @@ s2 :> {} @@ s3 :> {})

State 7: <NextAsync line 913, col 8 to line 913, col 44 of module raft>
/\ history = [ server |->
      ( s1 :> [restarted |-> 0, timeout |-> 1] @@
        s2 :> [restarted |-> 0, timeout |-> 0] @@
        s3 :> [restarted |-> 0, timeout |-> 0] ),
  global |->
      << [action |-> "Timeout", executedOn |-> s1],
         [ action |-> "Send",
           executedOn |-> s1,
           msg |->
               [ mtype |-> "RequestVoteRequest",
                 mterm |-> 2,
                 mlastLogTerm |-> 0,
                 mlastLogIndex |-> 0,
                 msource |-> s1,
                 mdest |-> s1 ] ],
         [ action |-> "Send",
           executedOn |-> s1,
           msg |->
               [ mtype |-> "RequestVoteRequest",
                 mterm |-> 2,
                 mlastLogTerm |-> 0,
                 mlastLogIndex |-> 0,
                 msource |-> s1,
                 mdest |-> s2 ] ],
         [ action |-> "Receive",
           executedOn |-> s1,
           msg |->
               [ mtype |-> "RequestVoteRequest",
                 mterm |-> 2,
                 mlastLogTerm |-> 0,
                 mlastLogIndex |-> 0,
                 msource |-> s1,
                 mdest |-> s1 ] ],
         [ action |-> "Send",
           executedOn |-> s1,
           msg |->
               [ mtype |-> "RequestVoteResponse",
                 mterm |-> 2,
                 msource |-> s1,
                 mdest |-> s1,
                 mvoteGranted |-> TRUE,
                 mlog |-> <<>> ] ],
         [ action |-> "Receive",
           executedOn |-> s1,
           msg |->
               [ mtype |-> "RequestVoteResponse",
                 mterm |-> 2,
                 msource |-> s1,
                 mdest |-> s1,
                 mvoteGranted |-> TRUE,
                 mlog |-> <<>> ] ] >>,
  hadNumLeaders |-> 0,
  hadNumClientRequests |-> 0,
  hadNumTriedMembershipChanges |-> 0,
  hadNumMembershipChanges |-> 0 ]
/\ votesResponded = (s1 :> {s1} @@ s2 :> {} @@ s3 :> {})
/\ nextIndex = ( s1 :> (s1 :> 1 @@ s2 :> 1 @@ s3 :> 1) @@
  s2 :> (s1 :> 1 @@ s2 :> 1 @@ s3 :> 1) @@
  s3 :> (s1 :> 1 @@ s2 :> 1 @@ s3 :> 1) )
/\ currentTerm = (s1 :> 2 @@ s2 :> 2 @@ s3 :> 1)
/\ votedFor = (s1 :> s1 @@ s2 :> 0 @@ s3 :> 0)
/\ matchIndex = ( s1 :> (s1 :> 0 @@ s2 :> 0 @@ s3 :> 0) @@
  s2 :> (s1 :> 0 @@ s2 :> 0 @@ s3 :> 0) @@
  s3 :> (s1 :> 0 @@ s2 :> 0 @@ s3 :> 0) )
/\ commitIndex = (s1 :> 0 @@ s2 :> 0 @@ s3 :> 0)
/\ state = (s1 :> "Candidate" @@ s2 :> "Follower" @@ s3 :> "Follower")
/\ messages = ( [ mtype |-> "RequestVoteRequest",
    mterm |-> 2,
    mlastLogTerm |-> 0,
    mlastLogIndex |-> 0,
    msource |-> s1,
    mdest |-> s2 ] :>
      1 )
/\ log = (s1 :> <<>> @@ s2 :> <<>> @@ s3 :> <<>>)
/\ votesGranted = (s1 :> {s1} @@ s2 :> {} @@ s3 :> {})

State 8: <NextAsync line 913, col 8 to line 913, col 44 of module raft>
/\ history = [ server |->
      ( s1 :> [restarted |-> 0, timeout |-> 1] @@
        s2 :> [restarted |-> 0, timeout |-> 0] @@
        s3 :> [restarted |-> 0, timeout |-> 0] ),
  global |->
      << [action |-> "Timeout", executedOn |-> s1],
         [ action |-> "Send",
           executedOn |-> s1,
           msg |->
               [ mtype |-> "RequestVoteRequest",
                 mterm |-> 2,
                 mlastLogTerm |-> 0,
                 mlastLogIndex |-> 0,
                 msource |-> s1,
                 mdest |-> s1 ] ],
         [ action |-> "Send",
           executedOn |-> s1,
           msg |->
               [ mtype |-> "RequestVoteRequest",
                 mterm |-> 2,
                 mlastLogTerm |-> 0,
                 mlastLogIndex |-> 0,
                 msource |-> s1,
                 mdest |-> s2 ] ],
         [ action |-> "Receive",
           executedOn |-> s1,
           msg |->
               [ mtype |-> "RequestVoteRequest",
                 mterm |-> 2,
                 mlastLogTerm |-> 0,
                 mlastLogIndex |-> 0,
                 msource |-> s1,
                 mdest |-> s1 ] ],
         [ action |-> "Send",
           executedOn |-> s1,
           msg |->
               [ mtype |-> "RequestVoteResponse",
                 mterm |-> 2,
                 msource |-> s1,
                 mdest |-> s1,
                 mvoteGranted |-> TRUE,
                 mlog |-> <<>> ] ],
         [ action |-> "Receive",
           executedOn |-> s1,
           msg |->
               [ mtype |-> "RequestVoteResponse",
                 mterm |-> 2,
                 msource |-> s1,
                 mdest |-> s1,
                 mvoteGranted |-> TRUE,
                 mlog |-> <<>> ] ],
         [ action |-> "Receive",
           executedOn |-> s2,
           msg |->
               [ mtype |-> "RequestVoteRequest",
                 mterm |-> 2,
                 mlastLogTerm |-> 0,
                 mlastLogIndex |-> 0,
                 msource |-> s1,
                 mdest |-> s2 ] ],
         [ action |-> "Send",
           executedOn |-> s2,
           msg |->
               [ mtype |-> "RequestVoteResponse",
                 mterm |-> 2,
                 msource |-> s2,
                 mdest |-> s1,
                 mvoteGranted |-> TRUE,
                 mlog |-> <<>> ] ] >>,
  hadNumLeaders |-> 0,
  hadNumClientRequests |-> 0,
  hadNumTriedMembershipChanges |-> 0,
  hadNumMembershipChanges |-> 0 ]
/\ votesResponded = (s1 :> {s1} @@ s2 :> {} @@ s3 :> {})
/\ nextIndex = ( s1 :> (s1 :> 1 @@ s2 :> 1 @@ s3 :> 1) @@
  s2 :> (s1 :> 1 @@ s2 :> 1 @@ s3 :> 1) @@
  s3 :> (s1 :> 1 @@ s2 :> 1 @@ s3 :> 1) )
/\ currentTerm = (s1 :> 2 @@ s2 :> 2 @@ s3 :> 1)
/\ votedFor = (s1 :> s1 @@ s2 :> s1 @@ s3 :> 0)
/\ matchIndex = ( s1 :> (s1 :> 0 @@ s2 :> 0 @@ s3 :> 0) @@
  s2 :> (s1 :> 0 @@ s2 :> 0 @@ s3 :> 0) @@
  s3 :> (s1 :> 0 @@ s2 :> 0 @@ s3 :> 0) )
/\ commitIndex = (s1 :> 0 @@ s2 :> 0 @@ s3 :> 0)
/\ state = (s1 :> "Candidate" @@ s2 :> "Follower" @@ s3 :> "Follower")
/\ messages = ( [ mtype |-> "RequestVoteResponse",
    mterm |-> 2,
    msource |-> s2,
    mdest |-> s1,
    mvoteGranted |-> TRUE,
    mlog |-> <<>> ] :>
      1 )
/\ log = (s1 :> <<>> @@ s2 :> <<>> @@ s3 :> <<>>)
/\ votesGranted = (s1 :> {s1} @@ s2 :> {} @@ s3 :> {})

State 9: <NextAsync line 913, col 8 to line 913, col 44 of module raft>
/\ history = [ server |->
      ( s1 :> [restarted |-> 0, timeout |-> 1] @@
        s2 :> [restarted |-> 0, timeout |-> 0] @@
        s3 :> [restarted |-> 0, timeout |-> 0] ),
  global |->
      << [action |-> "Timeout", executedOn |-> s1],
         [ action |-> "Send",
           executedOn |-> s1,
           msg |->
               [ mtype |-> "RequestVoteRequest",
                 mterm |-> 2,
                 mlastLogTerm |-> 0,
                 mlastLogIndex |-> 0,
                 msource |-> s1,
                 mdest |-> s1 ] ],
         [ action |-> "Send",
           executedOn |-> s1,
           msg |->
               [ mtype |-> "RequestVoteRequest",
                 mterm |-> 2,
                 mlastLogTerm |-> 0,
                 mlastLogIndex |-> 0,
                 msource |-> s1,
                 mdest |-> s2 ] ],
         [ action |-> "Receive",
           executedOn |-> s1,
           msg |->
               [ mtype |-> "RequestVoteRequest",
                 mterm |-> 2,
                 mlastLogTerm |-> 0,
                 mlastLogIndex |-> 0,
                 msource |-> s1,
                 mdest |-> s1 ] ],
         [ action |-> "Send",
           executedOn |-> s1,
           msg |->
               [ mtype |-> "RequestVoteResponse",
                 mterm |-> 2,
                 msource |-> s1,
                 mdest |-> s1,
                 mvoteGranted |-> TRUE,
                 mlog |-> <<>> ] ],
         [ action |-> "Receive",
           executedOn |-> s1,
           msg |->
               [ mtype |-> "RequestVoteResponse",
                 mterm |-> 2,
                 msource |-> s1,
                 mdest |-> s1,
                 mvoteGranted |-> TRUE,
                 mlog |-> <<>> ] ],
         [ action |-> "Receive",
           executedOn |-> s2,
           msg |->
               [ mtype |-> "RequestVoteRequest",
                 mterm |-> 2,
                 mlastLogTerm |-> 0,
                 mlastLogIndex |-> 0,
                 msource |-> s1,
                 mdest |-> s2 ] ],
         [ action |-> "Send",
           executedOn |-> s2,
           msg |->
               [ mtype |-> "RequestVoteResponse",
                 mterm |-> 2,
                 msource |-> s2,
                 mdest |-> s1,
                 mvoteGranted |-> TRUE,
                 mlog |-> <<>> ] ],
         [ action |-> "Receive",
           executedOn |-> s1,
           msg |->
               [ mtype |-> "RequestVoteResponse",
                 mterm |-> 2,
                 msource |-> s2,
                 mdest |-> s1,
                 mvoteGranted |-> TRUE,
                 mlog |-> <<>> ] ] >>,
  hadNumLeaders |-> 0,
  hadNumClientRequests |-> 0,
  hadNumTriedMembershipChanges |-> 0,
  hadNumMembershipChanges |-> 0 ]
/\ votesResponded = (s1 :> {s1, s2} @@ s2 :> {} @@ s3 :> {})
/\ nextIndex = ( s1 :> (s1 :> 1 @@ s2 :> 1 @@ s3 :> 1) @@
  s2 :> (s1 :> 1 @@ s2 :> 1 @@ s3 :> 1) @@
  s3 :> (s1 :> 1 @@ s2 :> 1 @@ s3 :> 1) )
/\ currentTerm = (s1 :> 2 @@ s2 :> 2 @@ s3 :> 1)
/\ votedFor = (s1 :> s1 @@ s2 :> s1 @@ s3 :> 0)
/\ matchIndex = ( s1 :> (s1 :> 0 @@ s2 :> 0 @@ s3 :> 0) @@
  s2 :> (s1 :> 0 @@ s2 :> 0 @@ s3 :> 0) @@
  s3 :> (s1 :> 0 @@ s2 :> 0 @@ s3 :> 0) )
/\ commitIndex = (s1 :> 0 @@ s2 :> 0 @@ s3 :> 0)
/\ state = (s1 :> "Candidate" @@ s2 :> "Follower" @@ s3 :> "Follower")
/\ messages = << >>
/\ log = (s1 :> <<>> @@ s2 :> <<>> @@ s3 :> <<>>)
/\ votesGranted = (s1 :> {s1, s2} @@ s2 :> {} @@ s3 :> {})

State 10: <BecomeLeader line 471, col 5 to line 482, col 76 of module raft>
/\ history = [ server |->
      ( s1 :> [restarted |-> 0, timeout |-> 1] @@
        s2 :> [restarted |-> 0, timeout |-> 0] @@
        s3 :> [restarted |-> 0, timeout |-> 0] ),
  global |->
      << [action |-> "Timeout", executedOn |-> s1],
         [ action |-> "Send",
           executedOn |-> s1,
           msg |->
               [ mtype |-> "RequestVoteRequest",
                 mterm |-> 2,
                 mlastLogTerm |-> 0,
                 mlastLogIndex |-> 0,
                 msource |-> s1,
                 mdest |-> s1 ] ],
         [ action |-> "Send",
           executedOn |-> s1,
           msg |->
               [ mtype |-> "RequestVoteRequest",
                 mterm |-> 2,
                 mlastLogTerm |-> 0,
                 mlastLogIndex |-> 0,
                 msource |-> s1,
                 mdest |-> s2 ] ],
         [ action |-> "Receive",
           executedOn |-> s1,
           msg |->
               [ mtype |-> "RequestVoteRequest",
                 mterm |-> 2,
                 mlastLogTerm |-> 0,
                 mlastLogIndex |-> 0,
                 msource |-> s1,
                 mdest |-> s1 ] ],
         [ action |-> "Send",
           executedOn |-> s1,
           msg |->
               [ mtype |-> "RequestVoteResponse",
                 mterm |-> 2,
                 msource |-> s1,
                 mdest |-> s1,
                 mvoteGranted |-> TRUE,
                 mlog |-> <<>> ] ],
         [ action |-> "Receive",
           executedOn |-> s1,
           msg |->
               [ mtype |-> "RequestVoteResponse",
                 mterm |-> 2,
                 msource |-> s1,
                 mdest |-> s1,
                 mvoteGranted |-> TRUE,
                 mlog |-> <<>> ] ],
         [ action |-> "Receive",
           executedOn |-> s2,
           msg |->
               [ mtype |-> "RequestVoteRequest",
                 mterm |-> 2,
                 mlastLogTerm |-> 0,
                 mlastLogIndex |-> 0,
                 msource |-> s1,
                 mdest |-> s2 ] ],
         [ action |-> "Send",
           executedOn |-> s2,
           msg |->
               [ mtype |-> "RequestVoteResponse",
                 mterm |-> 2,
                 msource |-> s2,
                 mdest |-> s1,
                 mvoteGranted |-> TRUE,
                 mlog |-> <<>> ] ],
         [ action |-> "Receive",
           executedOn |-> s1,
           msg |->
               [ mtype |-> "RequestVoteResponse",
                 mterm |-> 2,
                 msource |-> s2,
                 mdest |-> s1,
                 mvoteGranted |-> TRUE,
                 mlog |-> <<>> ] ],
         [action |-> "BecomeLeader", executedOn |-> s1, leaders |-> {s1}] >>,
  hadNumLeaders |-> 1,
  hadNumClientRequests |-> 0,
  hadNumTriedMembershipChanges |-> 0,
  hadNumMembershipChanges |-> 0 ]
/\ votesResponded = (s1 :> {s1, s2} @@ s2 :> {} @@ s3 :> {})
/\ nextIndex = ( s1 :> (s1 :> 1 @@ s2 :> 1 @@ s3 :> 1) @@
  s2 :> (s1 :> 1 @@ s2 :> 1 @@ s3 :> 1) @@
  s3 :> (s1 :> 1 @@ s2 :> 1 @@ s3 :> 1) )
/\ currentTerm = (s1 :> 2 @@ s2 :> 2 @@ s3 :> 1)
/\ votedFor = (s1 :> s1 @@ s2 :> s1 @@ s3 :> 0)
/\ matchIndex = ( s1 :> (s1 :> 0 @@ s2 :> 0 @@ s3 :> 0) @@
  s2 :> (s1 :> 0 @@ s2 :> 0 @@ s3 :> 0) @@
  s3 :> (s1 :> 0 @@ s2 :> 0 @@ s3 :> 0) )
/\ commitIndex = (s1 :> 0 @@ s2 :> 0 @@ s3 :> 0)
/\ state = (s1 :> "Leader" @@ s2 :> "Follower" @@ s3 :> "Follower")
/\ messages = << >>
/\ log = (s1 :> <<>> @@ s2 :> <<>> @@ s3 :> <<>>)
/\ votesGranted = (s1 :> {s1, s2} @@ s2 :> {} @@ s3 :> {})

1903 states generated, 287 distinct states found, 113 states left on queue.
The depth of the complete state graph search is 11.
The average outdegree of the complete state graph is 2 (minimum is 0, the maximum 4 and the 95th percentile is 4).
Finished in 00s at (2021-05-05 23:40:16)
